<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\bulid\ssl_client_demo_flash.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\bulid\ssl_client_demo_flash.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Jul 25 18:02:43 2017
<BR><P>
<H3>Maximum Stack Usage =       3184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TelnetTask &rArr; TELNETS &rArr; tel_input &rArr; telnet_menu &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
 <LI><a href="#[330]">icmpv6SendErrorMessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[343]">ipv6SendDatagram</a><BR>
 <LI><a href="#[370]">ndpSendNeighborSol</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[343]">ipv6SendDatagram</a><BR>
 <LI><a href="#[241]">Auto_Jump_HandTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[241]">Auto_Jump_HandTask</a><BR>
 <LI><a href="#[338]">ipv6ParseFragmentHeader</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c6]">ipv6ProcessPacket</a><BR>
 <LI><a href="#[3ed]">dnsParseName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ed]">dnsParseName</a><BR>
 <LI><a href="#[3ee]">dnsCompareName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ee]">dnsCompareName</a><BR>
 <LI><a href="#[481]">ssiProcessIncludeCommand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46e]">ssiExecuteScript</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[241]">Auto_Jump_HandTask</a> from display.o(.text) referenced from display.o(.text)
 <LI><a href="#[c]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[240]">DisplayTask</a> from display.o(.text) referenced from display.o(.text)
 <LI><a href="#[4f]">ETH_IRQHandler</a> from stm32f4x7_eth.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1aa]">IAP_wrq_recv_callback</a> from tftpserver.o(.text) referenced from tftpserver.o(.text)
 <LI><a href="#[153]">IwdgTask</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[b]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e1]">ModbusRTU</a> from modbus.o(.text) referenced from modbus.o(.text)
 <LI><a href="#[9]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">OTG_FS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[15]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14e]">ReadParam</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e6]">SNMPtrapTask</a> from snmp_trap.o(.text) referenced from snmp_trap.o(.text)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e4]">SendSMTPTask</a> from send_smtp.o(.text) referenced from send_smtp.o(.text)
 <LI><a href="#[11]">SysTick_Handler</a> from port.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[14]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from tim.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from tim.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from tim.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from tim.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1da]">TelnetTask</a> from telnet.o(.text) referenced from telnet.o(.text)
 <LI><a href="#[1b2]">TftpTask</a> from tftpserver.o(.text) referenced from tftpserver.o(.text)
 <LI><a href="#[46]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">USART1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from debug.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">USART6_IRQHandler</a> from debug.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[d0]">__main</a> from __main.o(!!!main) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[6a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[6c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6b]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[b4]">aesDecryptBlock</a> from aes.o(.text) referenced from aes.o(.constdata)
 <LI><a href="#[b3]">aesEncryptBlock</a> from aes.o(.text) referenced from aes.o(.constdata)
 <LI><a href="#[b2]">aesInit</a> from aes.o(.text) referenced from aes.o(.constdata)
 <LI><a href="#[bd]">ariaDecryptBlock</a> from aria.o(.text) referenced from aria.o(.constdata)
 <LI><a href="#[bc]">ariaEncryptBlock</a> from aria.o(.text) referenced from aria.o(.constdata)
 <LI><a href="#[bb]">ariaInit</a> from aria.o(.text) referenced from aria.o(.constdata)
 <LI><a href="#[b7]">camelliaDecryptBlock</a> from camellia.o(.text) referenced from camellia.o(.constdata)
 <LI><a href="#[b6]">camelliaEncryptBlock</a> from camellia.o(.text) referenced from camellia.o(.constdata)
 <LI><a href="#[b5]">camelliaInit</a> from camellia.o(.text) referenced from camellia.o(.constdata)
 <LI><a href="#[b1]">des3DecryptBlock</a> from des3.o(.text) referenced from des3.o(.constdata)
 <LI><a href="#[b0]">des3EncryptBlock</a> from des3.o(.text) referenced from des3.o(.constdata)
 <LI><a href="#[af]">des3Init</a> from des3.o(.text) referenced from des3.o(.constdata)
 <LI><a href="#[ae]">desDecryptBlock</a> from des.o(.text) referenced from des.o(.constdata)
 <LI><a href="#[ad]">desEncryptBlock</a> from des.o(.text) referenced from des.o(.constdata)
 <LI><a href="#[ac]">desInit</a> from des.o(.text) referenced from des.o(.constdata)
 <LI><a href="#[3fd]">dhcpClientProcessMessage</a> from dhcp_client.o(.text) referenced from dhcp_client.o(.text)
 <LI><a href="#[3ec]">dnsProcessResponse</a> from dns_client.o(.text) referenced from dns_client.o(.text)
 <LI><a href="#[6d]">fputc</a> from debug.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[467]">httpConnectionTask</a> from http_server.o(.text) referenced from http_server.o(.text)
 <LI><a href="#[462]">httpListenerTask</a> from http_server.o(.text) referenced from http_server.o(.text)
 <LI><a href="#[67]">httpServerUriNotFoundCallback</a> from web.o(.text) referenced from web.o(.text)
 <LI><a href="#[80]">lan8720DisableIrq</a> from lan8720.o(.text) referenced from lan8720.o(.constdata)
 <LI><a href="#[7f]">lan8720EnableIrq</a> from lan8720.o(.text) referenced from lan8720.o(.constdata)
 <LI><a href="#[81]">lan8720EventHandler</a> from lan8720.o(.text) referenced from lan8720.o(.constdata)
 <LI><a href="#[7d]">lan8720Init</a> from lan8720.o(.text) referenced from lan8720.o(.constdata)
 <LI><a href="#[7e]">lan8720Tick</a> from lan8720.o(.text) referenced from lan8720.o(.constdata)
 <LI><a href="#[14a]">ledTask</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[92]">md5Compute</a> from md5.o(.text) referenced from md5.o(.constdata)
 <LI><a href="#[95]">md5Final</a> from md5.o(.text) referenced from md5.o(.constdata)
 <LI><a href="#[93]">md5Init</a> from md5.o(.text) referenced from md5.o(.constdata)
 <LI><a href="#[94]">md5Update</a> from md5.o(.text) referenced from md5.o(.constdata)
 <LI><a href="#[83]">mib2GetIfEntry</a> from mib2_impl.o(.text) referenced 22 times from mib2_module.o(.constdata)
 <LI><a href="#[85]">mib2GetIpAddrEntry</a> from mib2_impl.o(.text) referenced 5 times from mib2_module.o(.constdata)
 <LI><a href="#[88]">mib2GetIpNetToMediaEntry</a> from mib2_impl.o(.text) referenced 4 times from mib2_module.o(.constdata)
 <LI><a href="#[84]">mib2GetNextIfEntry</a> from mib2_impl.o(.text) referenced 22 times from mib2_module.o(.constdata)
 <LI><a href="#[86]">mib2GetNextIpAddrEntry</a> from mib2_impl.o(.text) referenced 5 times from mib2_module.o(.constdata)
 <LI><a href="#[89]">mib2GetNextIpNetToMediaEntry</a> from mib2_impl.o(.text) referenced 4 times from mib2_module.o(.constdata)
 <LI><a href="#[8c]">mib2GetNextTcpConnEntry</a> from mib2_impl.o(.text) referenced 5 times from mib2_module.o(.constdata)
 <LI><a href="#[8e]">mib2GetNextUdpEntry</a> from mib2_impl.o(.text) referenced 2 times from mib2_module.o(.constdata)
 <LI><a href="#[82]">mib2GetSysUpTime</a> from mib2_impl.o(.text) referenced from mib2_module.o(.constdata)
 <LI><a href="#[8b]">mib2GetTcpConnEntry</a> from mib2_impl.o(.text) referenced 5 times from mib2_module.o(.constdata)
 <LI><a href="#[8d]">mib2GetUdpEntry</a> from mib2_impl.o(.text) referenced 2 times from mib2_module.o(.constdata)
 <LI><a href="#[8f]">mib2Init</a> from mib2_impl.o(.text) referenced from mib2_module.o(.constdata)
 <LI><a href="#[90]">mib2Lock</a> from mib2_impl.o(.text) referenced from mib2_module.o(.constdata)
 <LI><a href="#[87]">mib2SetIpNetToMediaEntry</a> from mib2_impl.o(.text) referenced 4 times from mib2_module.o(.constdata)
 <LI><a href="#[8a]">mib2SetTcpConnEntry</a> from mib2_impl.o(.text) referenced from mib2_module.o(.constdata)
 <LI><a href="#[91]">mib2Unlock</a> from mib2_impl.o(.text) referenced from mib2_module.o(.constdata)
 <LI><a href="#[3f7]">nbnsProcessMessage</a> from nbns_common.o(.text) referenced from nbns_common.o(.text)
 <LI><a href="#[292]">netTask</a> from net.o(.text) referenced from net.o(.text)
 <LI><a href="#[6e]">privateMibGetLedEntry</a> from private_mib_impl.o(.text) referenced 36 times from private_mib_module.o(.constdata)
 <LI><a href="#[70]">privateMibInit</a> from private_mib_impl.o(.text) referenced from private_mib_module.o(.constdata)
 <LI><a href="#[71]">privateMibLock</a> from private_mib_impl.o(.text) referenced from private_mib_module.o(.constdata)
 <LI><a href="#[6f]">privateMibSetLedEntry</a> from private_mib_impl.o(.text) referenced 14 times from private_mib_module.o(.constdata)
 <LI><a href="#[72]">privateMibUnlock</a> from private_mib_impl.o(.text) referenced from private_mib_module.o(.constdata)
 <LI><a href="#[69]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[68]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[ab]">rc4Cipher</a> from rc4.o(.text) referenced 2 times from rc4.o(.constdata)
 <LI><a href="#[aa]">rc4Init</a> from rc4.o(.text) referenced from rc4.o(.constdata)
 <LI><a href="#[be]">secp128r1Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[bf]">secp128r2Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[c0]">secp160k1Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[c1]">secp160r1Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[c2]">secp160r2Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[c3]">secp192k1Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[c4]">secp192r1Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[c5]">secp224k1Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[c6]">secp224r1Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[c7]">secp256k1Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[c8]">secp256r1Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[c9]">secp384r1Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[ca]">secp521r1Mod</a> from ec_curves.o(.text) referenced from ec_curves.o(.constdata)
 <LI><a href="#[ba]">seedDecryptBlock</a> from seed.o(.text) referenced from seed.o(.constdata)
 <LI><a href="#[b9]">seedEncryptBlock</a> from seed.o(.text) referenced from seed.o(.constdata)
 <LI><a href="#[b8]">seedInit</a> from seed.o(.text) referenced from seed.o(.constdata)
 <LI><a href="#[96]">sha1Compute</a> from sha1.o(.text) referenced from sha1.o(.constdata)
 <LI><a href="#[99]">sha1Final</a> from sha1.o(.text) referenced from sha1.o(.constdata)
 <LI><a href="#[97]">sha1Init</a> from sha1.o(.text) referenced from sha1.o(.constdata)
 <LI><a href="#[98]">sha1Update</a> from sha1.o(.text) referenced from sha1.o(.constdata)
 <LI><a href="#[9a]">sha224Compute</a> from sha224.o(.text) referenced from sha224.o(.constdata)
 <LI><a href="#[9d]">sha224Final</a> from sha224.o(.text) referenced from sha224.o(.constdata)
 <LI><a href="#[9b]">sha224Init</a> from sha224.o(.text) referenced from sha224.o(.constdata)
 <LI><a href="#[9c]">sha224Update</a> from sha224.o(.text) referenced from sha224.o(.constdata)
 <LI><a href="#[9e]">sha256Compute</a> from sha256.o(.text) referenced from sha256.o(.constdata)
 <LI><a href="#[a1]">sha256Final</a> from sha256.o(.text) referenced from sha256.o(.constdata)
 <LI><a href="#[9f]">sha256Init</a> from sha256.o(.text) referenced from sha256.o(.constdata)
 <LI><a href="#[a0]">sha256Update</a> from sha256.o(.text) referenced from sha256.o(.constdata)
 <LI><a href="#[a2]">sha384Compute</a> from sha384.o(.text) referenced from sha384.o(.constdata)
 <LI><a href="#[a5]">sha384Final</a> from sha384.o(.text) referenced from sha384.o(.constdata)
 <LI><a href="#[a3]">sha384Init</a> from sha384.o(.text) referenced from sha384.o(.constdata)
 <LI><a href="#[a4]">sha384Update</a> from sha384.o(.text) referenced from sha384.o(.constdata)
 <LI><a href="#[a6]">sha512Compute</a> from sha512.o(.text) referenced from sha512.o(.constdata)
 <LI><a href="#[a9]">sha512Final</a> from sha512.o(.text) referenced from sha512.o(.constdata)
 <LI><a href="#[a7]">sha512Init</a> from sha512.o(.text) referenced from sha512.o(.constdata)
 <LI><a href="#[a8]">sha512Update</a> from sha512.o(.text) referenced from sha512.o(.constdata)
 <LI><a href="#[48c]">smtpEhloReplyCallback</a> from smtp_client.o(.text) referenced 2 times from smtp_client.o(.text)
 <LI><a href="#[66]">snmpAgentRandCallback</a> from function.o(.text) referenced from main.o(.text)
 <LI><a href="#[411]">snmpAgentTask</a> from snmp_agent.o(.text) referenced from snmp_agent.o(.text)
 <LI><a href="#[76]">stm32f4x7EthDisableIrq</a> from stm32f4x7_eth.o(.text) referenced from stm32f4x7_eth.o(.constdata)
 <LI><a href="#[75]">stm32f4x7EthEnableIrq</a> from stm32f4x7_eth.o(.text) referenced from stm32f4x7_eth.o(.constdata)
 <LI><a href="#[77]">stm32f4x7EthEventHandler</a> from stm32f4x7_eth.o(.text) referenced from stm32f4x7_eth.o(.constdata)
 <LI><a href="#[73]">stm32f4x7EthInit</a> from stm32f4x7_eth.o(.text) referenced from stm32f4x7_eth.o(.constdata)
 <LI><a href="#[7c]">stm32f4x7EthReadPhyReg</a> from stm32f4x7_eth.o(.text) referenced from stm32f4x7_eth.o(.constdata)
 <LI><a href="#[78]">stm32f4x7EthSendPacket</a> from stm32f4x7_eth.o(.text) referenced from stm32f4x7_eth.o(.constdata)
 <LI><a href="#[79]">stm32f4x7EthSetMulticastFilter</a> from stm32f4x7_eth.o(.text) referenced from stm32f4x7_eth.o(.constdata)
 <LI><a href="#[74]">stm32f4x7EthTick</a> from stm32f4x7_eth.o(.text) referenced from stm32f4x7_eth.o(.constdata)
 <LI><a href="#[7a]">stm32f4x7EthUpdateMacConfig</a> from stm32f4x7_eth.o(.text) referenced from stm32f4x7_eth.o(.constdata)
 <LI><a href="#[7b]">stm32f4x7EthWritePhyReg</a> from stm32f4x7_eth.o(.text) referenced from stm32f4x7_eth.o(.constdata)
 <LI><a href="#[1b0]">tftp_recevice_callback</a> from tftpserver.o(.text) referenced from tftpserver.o(.text)
 <LI><a href="#[ce]">yarrowAddEntropy</a> from yarrow.o(.text) referenced from yarrow.o(.constdata)
 <LI><a href="#[cb]">yarrowInit</a> from yarrow.o(.text) referenced from yarrow.o(.constdata)
 <LI><a href="#[cf]">yarrowRead</a> from yarrow.o(.text) referenced from yarrow.o(.constdata)
 <LI><a href="#[cc]">yarrowRelease</a> from yarrow.o(.text) referenced from yarrow.o(.constdata)
 <LI><a href="#[cd]">yarrowSeed</a> from yarrow.o(.text) referenced from yarrow.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d0]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d1]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d3]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[61b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[61c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[61d]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[61e]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[61f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[d4]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5d8]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d6]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d9]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[db]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[dd]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[620]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[e9]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[df]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[e1]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit5.o(.ARM.Collect$$libinit$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[621]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[622]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[623]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[624]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[625]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[626]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[627]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[628]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[629]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[62a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[62b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[62c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[62d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[62e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[62f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[630]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[631]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[632]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[633]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[634]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ee]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[635]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[636]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[637]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[638]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[639]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[63a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[d2]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[63b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[63c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[e8]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[63d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ea]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; snmpAgentInit &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[63e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5fb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ed]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[63f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ef]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[575]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[574]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[640]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[641]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SystemInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[642]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[643]"></a>fgetc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[5f4]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[f4]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[f0]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[f7]"></a>get_dhcp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
</UL>

<P><STRONG><a name="[f9]"></a>button_init_softset</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = button_init_softset &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[fd]"></a>board_init</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = board_init &rArr; iicreaddata &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicresetdata
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicreaddata
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICinit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init_softset
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>main</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = main &rArr; snmpAgentInit &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppObjCreate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentStart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetEnterpriseOid
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetContextEngine
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentLoadMib
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentGetDefaultSettings
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateUser
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateCommunity
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osStartKernel
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osInitKernel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidFromString
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macStringToAddr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGateway
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientGetDefaultSettings
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Cmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12a]"></a>USART3_CS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_One_Byte3
</UL>

<P><STRONG><a name="[644]"></a>RS485_SendBefor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[645]"></a>RS485_SendOver</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[646]"></a>RS485_6_SendBefor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[647]"></a>RS485_6_SendOver</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[648]"></a>ComToUSARTx</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>USART_SetBaudRate</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_SetBaudRate &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibSetLedEntry
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[107]"></a>bsp_InitUart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bsp_InitUart &rArr; InitHardUart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUartNVIC
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartVarInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[13d]"></a>ComToUart</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comClearRxFifo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comClearTxFifo
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comGetChar
</UL>

<P><STRONG><a name="[13c]"></a>comGetChar</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = comGetChar &rArr; UartGetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUart
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Recive_data
</UL>

<P><STRONG><a name="[13e]"></a>Uart_Recive_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart_Recive_data &rArr; comGetChar &rArr; UartGetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comGetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTU
</UL>

<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; UartIRQ &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART6_IRQHandler &rArr; UartIRQ &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b3]"></a>debugDisplayArray</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
</UL>

<P><STRONG><a name="[6d]"></a>fputc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[142]"></a>Send_One_Byte6</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_send_data
</UL>

<P><STRONG><a name="[145]"></a>uart6_send_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_One_Byte6
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
</UL>

<P><STRONG><a name="[146]"></a>Send_One_Byte3</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Send_One_Byte3 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_CS
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_data
</UL>

<P><STRONG><a name="[147]"></a>uart3_send_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart3_send_data &rArr; Send_One_Byte3 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_One_Byte3
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modbus_data
</UL>

<P><STRONG><a name="[148]"></a>comClearTxFifo</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUart
</UL>

<P><STRONG><a name="[149]"></a>comClearRxFifo</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = comClearRxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUart
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTU
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modbus_data
</UL>

<P><STRONG><a name="[14a]"></a>ledTask</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ledTask &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_alm
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beel
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[14e]"></a>ReadParam</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ReadParam &rArr; RN8207Read &rArr; correct_ac_parameter &rArr; read_correctPHxC &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperatuer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_energy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Read
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_8207
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[153]"></a>IwdgTask</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IwdgTask &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>application</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = application &rArr; http_web_init &rArr; httpsServerInit &rArr; httpServerInit &rArr; socketOpen &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smtp_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_rtu
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_web_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNMP_trap_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftpd_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>xEventGroupCreate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppObjCreate
</UL>

<P><STRONG><a name="[14d]"></a>xEventGroupSetBits</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNMPtrapTask
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTU
</UL>

<P><STRONG><a name="[164]"></a>xEventGroupSync</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[155]"></a>xEventGroupWaitBits</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgTask
</UL>

<P><STRONG><a name="[168]"></a>xEventGroupClearBits</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupClearBitsCallback
</UL>

<P><STRONG><a name="[649]"></a>xEventGroupGetBitsFromISR</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>vEventGroupDelete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[16b]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[16c]"></a>vEventGroupClearBitsCallback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>

<P><STRONG><a name="[16d]"></a>Key_Set_Menu</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_Set_Menu
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_driver
</UL>

<P><STRONG><a name="[64a]"></a>delay_key</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_key.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>KEY_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[16e]"></a>key_driver</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = key_driver &rArr; Key_Set_Menu
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Set_Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_read
</UL>

<P><STRONG><a name="[16f]"></a>key_read</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = key_read &rArr; key_driver &rArr; Key_Set_Menu
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[171]"></a>sure_menu</STRONG> (Thumb, 2420 bytes, Stack size 8 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sure_menu
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[170]"></a>key_scan</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = key_scan &rArr; key_read &rArr; key_driver &rArr; Key_Set_Menu
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sure_menu
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>run_led</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = run_led
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[14b]"></a>run_alm</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = run_alm
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[173]"></a>run_mw</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = run_mw
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_energy
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[14c]"></a>beel</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beel
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dc_parameter
</UL>

<P><STRONG><a name="[101]"></a>LED_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_mw
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_led
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_alm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[1ad]"></a>devicedown</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modbus_data
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_menu
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTask
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_process_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_wrq_recv_callback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Jump_HandTask
</UL>

<P><STRONG><a name="[154]"></a>IWDG_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgTask
</UL>

<P><STRONG><a name="[178]"></a>FLASH_If_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_If_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_process_write
</UL>

<P><STRONG><a name="[17b]"></a>FLASH_If_Erase</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, flash_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_If_Erase &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_process_write
</UL>

<P><STRONG><a name="[17d]"></a>FLASH_If_Write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, flash_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FLASH_If_Write &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_wrq_recv_callback
</UL>

<P><STRONG><a name="[70]"></a>privateMibInit</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, private_mib_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = privateMibInit &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_mib_module.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>privateMibLock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, private_mib_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = privateMibLock &rArr; osAcquireMutex &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_mib_module.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>privateMibUnlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, private_mib_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = privateMibUnlock &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_mib_module.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>privateMibGetCurrentTime</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, private_mib_impl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>

<P><STRONG><a name="[6f]"></a>privateMibSetLedEntry</STRONG> (Thumb, 746 bytes, Stack size 32 bytes, private_mib_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = privateMibSetLedEntry &rArr; USART_SetBaudRate &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_mib_module.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>privateMibGetLedEntry</STRONG> (Thumb, 1012 bytes, Stack size 40 bytes, private_mib_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = privateMibGetLedEntry &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_mib_module.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>privateMibGetNextLedEntry</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, private_mib_impl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[191]"></a>Delay_temhum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, temhum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperatuer
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_measure
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_read_byte
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_connectionreset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_transstart
</UL>

<P><STRONG><a name="[18d]"></a>set_data</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, temhum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_data
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_read_byte
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_connectionreset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_transstart
</UL>

<P><STRONG><a name="[18e]"></a>set_clk</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, temhum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_read_byte
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_connectionreset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_transstart
</UL>

<P><STRONG><a name="[18f]"></a>temhum_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, temhum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = temhum_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperatuer
</UL>

<P><STRONG><a name="[190]"></a>s_transstart</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, temhum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = s_transstart &rArr; set_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_clk
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_temhum
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_measure
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_connectionreset
</UL>

<P><STRONG><a name="[192]"></a>s_connectionreset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, temhum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = s_connectionreset &rArr; s_transstart &rArr; set_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_transstart
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_clk
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_temhum
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperatuer
</UL>

<P><STRONG><a name="[193]"></a>s_write_byte</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, temhum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = s_write_byte &rArr; set_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_clk
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_temhum
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_measure
</UL>

<P><STRONG><a name="[194]"></a>s_read_byte</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, temhum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = s_read_byte &rArr; set_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_clk
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_temhum
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_measure
</UL>

<P><STRONG><a name="[195]"></a>s_measure</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, temhum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = s_measure &rArr; s_read_byte &rArr; set_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_read_byte
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_write_byte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_transstart
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_temhum
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperatuer
</UL>

<P><STRONG><a name="[196]"></a>calc_sht10</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, temhum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperatuer
</UL>

<P><STRONG><a name="[152]"></a>Temperatuer</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, temhum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Temperatuer &rArr; s_measure &rArr; s_read_byte &rArr; set_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sht10
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_measure
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_connectionreset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temhum_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_temhum
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam
</UL>

<P><STRONG><a name="[197]"></a>Time3_Init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>Time2_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Time2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM2_IRQHandler &rArr; key_scan &rArr; key_read &rArr; key_driver &rArr; Key_Set_Menu
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19f]"></a>Time4_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>

<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a0]"></a>Time5_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>

<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM5_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>IAP_tftp_send_ack_packet</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, tftpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = IAP_tftp_send_ack_packet &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_set_block
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_set_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_process_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_wrq_recv_callback
</UL>

<P><STRONG><a name="[1aa]"></a>IAP_wrq_recv_callback</STRONG> (Thumb, 230 bytes, Stack size 1088 bytes, tftpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = IAP_wrq_recv_callback &rArr; IAP_tftp_send_ack_packet &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedown
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_send_ack_packet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_extract_block
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tftpserver.o(.text)
</UL>
<P><STRONG><a name="[1ae]"></a>IAP_tftp_process_write</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tftpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = IAP_tftp_process_write &rArr; IAP_tftp_send_ack_packet &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedown
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_send_ack_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_recevice_callback
</UL>

<P><STRONG><a name="[1b0]"></a>tftp_recevice_callback</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, tftpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = tftp_recevice_callback &rArr; IAP_tftp_process_write &rArr; IAP_tftp_send_ack_packet &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_process_write
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_decode_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tftpserver.o(.text)
</UL>
<P><STRONG><a name="[1b2]"></a>TftpTask</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tftpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TftpTask &rArr; udpAttachRxCallback &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedown
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tftpserver.o(.text)
</UL>
<P><STRONG><a name="[159]"></a>IAP_tftpd_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tftpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = IAP_tftpd_init &rArr; osCreateTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
</UL>

<P><STRONG><a name="[1b8]"></a>DelayNop_iic</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, 24c04-iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadbyte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwritebyte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstart
</UL>

<P><STRONG><a name="[1b3]"></a>wp_eeprom</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wp_eeprom
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICinit
</UL>

<P><STRONG><a name="[1b4]"></a>SCL</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCL
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadbyte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwritebyte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstart
</UL>

<P><STRONG><a name="[1b5]"></a>SDA</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwritebyte
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstart
</UL>

<P><STRONG><a name="[1b6]"></a>readSDA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadbyte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICack
</UL>

<P><STRONG><a name="[1b7]"></a>IICstart</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IICstart &rArr; SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_iic
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead_2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
</UL>

<P><STRONG><a name="[1b9]"></a>IICstop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IICstop &rArr; SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_iic
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead_2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
</UL>

<P><STRONG><a name="[1ba]"></a>IICack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IICack &rArr; readSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSDA
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_iic
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead_2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
</UL>

<P><STRONG><a name="[1bb]"></a>IICwritebyte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IICwritebyte &rArr; SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_iic
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead_2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
</UL>

<P><STRONG><a name="[1bc]"></a>IICreadbyte</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IICreadbyte &rArr; readSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSDA
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_iic
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead_2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
</UL>

<P><STRONG><a name="[1bd]"></a>I2cRead</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2cRead &rArr; IICreadbyte &rArr; readSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadbyte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwritebyte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstart
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicreaddata
</UL>

<P><STRONG><a name="[188]"></a>I2cWrite</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2cWrite &rArr; I2cRead &rArr; IICreadbyte &rArr; readSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwritebyte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstart
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_eeprom
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_iic
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibSetLedEntry
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicresetdata
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicreaddata
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_C
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_B
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_A
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modbus_data
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_wrq_recv_callback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Jump_HandTask
</UL>

<P><STRONG><a name="[1be]"></a>I2cRead_2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2cRead_2 &rArr; IICreadbyte &rArr; readSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICreadbyte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwritebyte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstart
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicreaddata
</UL>

<P><STRONG><a name="[189]"></a>I2cWrite_2</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2cWrite_2 &rArr; I2cRead &rArr; IICreadbyte &rArr; readSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICwritebyte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICstart
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_eeprom
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_iic
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibSetLedEntry
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_energy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicresetdata
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IARMSOS_offset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code_dc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modbus_data
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Jump_HandTask
</UL>

<P><STRONG><a name="[ff]"></a>IICinit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IICinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[105]"></a>iicresetdata</STRONG> (Thumb, 742 bytes, Stack size 8 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iicresetdata &rArr; I2cWrite_2 &rArr; I2cRead &rArr; IICreadbyte &rArr; readSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_menu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
</UL>

<P><STRONG><a name="[106]"></a>iicreaddata</STRONG> (Thumb, 2230 bytes, Stack size 32 bytes, 24c04-iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = iicreaddata &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead_2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[1c2]"></a>extic_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2422 bytes, Stack size 8 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extic_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extic_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>EXTIX_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EXTIX_Init &rArr; KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[64b]"></a>functon_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, function.o(.text), UNUSED)

<P><STRONG><a name="[64c]"></a>xor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, function.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>mytok</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mytok &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
</UL>

<P><STRONG><a name="[66]"></a>snmpAgentRandCallback</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = snmpAgentRandCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNumber
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1ca]"></a>reqorder</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = reqorder &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
</UL>

<P><STRONG><a name="[1cb]"></a>smtpClientTest</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, function.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
</UL>

<P><STRONG><a name="[1cd]"></a>login</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = login &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_input
</UL>

<P><STRONG><a name="[1cf]"></a>telnet_menu</STRONG> (Thumb, 722 bytes, Stack size 2168 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112 + Unknown Stack Size
<LI>Call Chain = telnet_menu &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedown
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicresetdata
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_input
</UL>

<P><STRONG><a name="[1d1]"></a>sendIAC</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = sendIAC &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_telopt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doopt
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wontopt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;willopt
</UL>

<P><STRONG><a name="[1d2]"></a>willopt</STRONG> (Thumb, 726 bytes, Stack size 16 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = willopt &rArr; sendIAC &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIAC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_input
</UL>

<P><STRONG><a name="[1d3]"></a>wontopt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = wontopt &rArr; sendIAC &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIAC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_input
</UL>

<P><STRONG><a name="[1d4]"></a>doopt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = doopt &rArr; sendIAC &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIAC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_input
</UL>

<P><STRONG><a name="[1d7]"></a>dontopt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, telnet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_input
</UL>

<P><STRONG><a name="[1d5]"></a>tel_input</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3144 + Unknown Stack Size
<LI>Call Chain = tel_input &rArr; telnet_menu &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dontopt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doopt
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wontopt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;willopt
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_menu
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELNETS
</UL>

<P><STRONG><a name="[1d8]"></a>init_telopt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = init_telopt &rArr; sendIAC &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIAC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELNETS
</UL>

<P><STRONG><a name="[1d9]"></a>TELNETS</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3160 + Unknown Stack Size
<LI>Call Chain = TELNETS &rArr; tel_input &rArr; telnet_menu &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_telopt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
</UL>

<P><STRONG><a name="[1da]"></a>TelnetTask</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3184 + Unknown Stack Size
<LI>Call Chain = TelnetTask &rArr; TELNETS &rArr; tel_input &rArr; telnet_menu &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketBind
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAccept
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELNETS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>Telnet_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Telnet_init &rArr; osCreateTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
</UL>

<P><STRONG><a name="[1e0]"></a>CRC16_2</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modbus_data
</UL>

<P><STRONG><a name="[1df]"></a>read_modbus_data</STRONG> (Thumb, 4406 bytes, Stack size 312 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = read_modbus_data &rArr; uart3_send_data &rArr; Send_One_Byte3 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedown
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comClearRxFifo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_data
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_2
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTU
</UL>

<P><STRONG><a name="[1e1]"></a>ModbusRTU</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ModbusRTU &rArr; read_modbus_data &rArr; uart3_send_data &rArr; Send_One_Byte3 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comClearRxFifo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Recive_data
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modbus_data
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>modbus_rtu</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = modbus_rtu &rArr; osCreateTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
</UL>

<P><STRONG><a name="[1e2]"></a>Send_Mail</STRONG> (Thumb, 288 bytes, Stack size 160 bytes, send_smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = Send_Mail &rArr; smtpSendMail &rArr; smtpSendData &rArr; smtpSendCommand &rArr; smtpRead &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strDuplicate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMTPTask
</UL>

<P><STRONG><a name="[1e4]"></a>SendSMTPTask</STRONG> (Thumb, 1118 bytes, Stack size 192 bytes, send_smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
<LI>Call Chain = SendSMTPTask &rArr; Send_Mail &rArr; smtpSendMail &rArr; smtpSendData &rArr; smtpSendCommand &rArr; smtpRead &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Mail
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> send_smtp.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>send_smtp_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, send_smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = send_smtp_init &rArr; osCreateTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
</UL>

<P><STRONG><a name="[1e6]"></a>SNMPtrapTask</STRONG> (Thumb, 540 bytes, Stack size 80 bytes, snmp_trap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = SNMPtrapTask &rArr; snmpAgentSendTrap &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmp_trap.o(.text)
</UL>
<P><STRONG><a name="[15d]"></a>SNMP_trap_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, snmp_trap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SNMP_trap_init &rArr; osCreateTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
</UL>

<P><STRONG><a name="[64d]"></a>rn8207_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rn8207.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>read_8207</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_send_data
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Recive_data
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_energy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dc_parameter
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IARMSOS_offset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code_dc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_l3
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_l2
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_l1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rn8207_read_l3
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rn8207_read_l2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rn8207_read_l1
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_set
</UL>

<P><STRONG><a name="[1ea]"></a>write_8207</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_send_data
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_8207
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_C
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_B
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_A
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_dc
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IARMSOS_offset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code_dc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_set
</UL>

<P><STRONG><a name="[1eb]"></a>correct_set</STRONG> (Thumb, 922 bytes, Stack size 40 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = correct_set &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_8207
</UL>

<P><STRONG><a name="[14f]"></a>Init_8207</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Init_8207 &rArr; correct_set &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_set
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam
</UL>

<P><STRONG><a name="[1ec]"></a>rn8207_read_l1</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rn8207_read_l1 &rArr; read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Read
</UL>

<P><STRONG><a name="[1ed]"></a>rn8207_read_l2</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rn8207_read_l2 &rArr; read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Read
</UL>

<P><STRONG><a name="[1ee]"></a>rn8207_read_l3</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rn8207_read_l3 &rArr; read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Read
</UL>

<P><STRONG><a name="[1ef]"></a>correct_l1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = correct_l1 &rArr; read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_A
</UL>

<P><STRONG><a name="[1f0]"></a>correct_l2</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = correct_l2 &rArr; read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_B
</UL>

<P><STRONG><a name="[1f1]"></a>correct_l3</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = correct_l3 &rArr; read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_C
</UL>

<P><STRONG><a name="[1f2]"></a>RN8207Check_A</STRONG> (Thumb, 372 bytes, Stack size 136 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RN8207Check_A &rArr; correct_l1 &rArr; read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_l1
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ac_parameter
</UL>

<P><STRONG><a name="[1f3]"></a>RN8207Check_B</STRONG> (Thumb, 424 bytes, Stack size 136 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RN8207Check_B &rArr; correct_l2 &rArr; read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_l2
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ac_parameter
</UL>

<P><STRONG><a name="[1f4]"></a>RN8207Check_C</STRONG> (Thumb, 372 bytes, Stack size 136 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RN8207Check_C &rArr; correct_l3 &rArr; read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_l3
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ac_parameter
</UL>

<P><STRONG><a name="[1f5]"></a>correct_dc</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = correct_dc &rArr; read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dc_parameter
</UL>

<P><STRONG><a name="[1f6]"></a>read_code_dc</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = read_code_dc &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dc_parameter
</UL>

<P><STRONG><a name="[1f7]"></a>IARMSOS_offset</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IARMSOS_offset &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dc_parameter
</UL>

<P><STRONG><a name="[1f8]"></a>clear_zero_register_dc</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = clear_zero_register_dc &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
</UL>

<P><STRONG><a name="[1f9]"></a>clear_zero_register_A</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = clear_zero_register_A &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
</UL>

<P><STRONG><a name="[1fa]"></a>clear_zero_register_B</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = clear_zero_register_B &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
</UL>

<P><STRONG><a name="[1fb]"></a>clear_zero_register_C</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = clear_zero_register_C &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
</UL>

<P><STRONG><a name="[1fc]"></a>read_correctPF_dc</STRONG> (Thumb, 444 bytes, Stack size 96 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = read_correctPF_dc &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dc_parameter
</UL>

<P><STRONG><a name="[205]"></a>read_correctPF_A</STRONG> (Thumb, 476 bytes, Stack size 88 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = read_correctPF_A &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ac_parameter
</UL>

<P><STRONG><a name="[207]"></a>read_correctPF_B</STRONG> (Thumb, 542 bytes, Stack size 88 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = read_correctPF_B &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ac_parameter
</UL>

<P><STRONG><a name="[208]"></a>read_correctPF_C</STRONG> (Thumb, 478 bytes, Stack size 88 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = read_correctPF_C &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ac_parameter
</UL>

<P><STRONG><a name="[209]"></a>read_correctPHxA</STRONG> (Thumb, 874 bytes, Stack size 136 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = read_correctPHxA &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ac_parameter
</UL>

<P><STRONG><a name="[20d]"></a>read_correctPHxB</STRONG> (Thumb, 918 bytes, Stack size 136 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = read_correctPHxB &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ac_parameter
</UL>

<P><STRONG><a name="[20e]"></a>read_correctPHxC</STRONG> (Thumb, 894 bytes, Stack size 136 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = read_correctPHxC &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ac_parameter
</UL>

<P><STRONG><a name="[20f]"></a>correct_ac_parameter</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = correct_ac_parameter &rArr; read_correctPHxC &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_C
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_B
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_A
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Read
</UL>

<P><STRONG><a name="[210]"></a>correct_dc_parameter</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = correct_dc_parameter &rArr; read_correctPF_dc &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beel
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IARMSOS_offset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code_dc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Read
</UL>

<P><STRONG><a name="[150]"></a>RN8207Read</STRONG> (Thumb, 1354 bytes, Stack size 32 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RN8207Read &rArr; correct_ac_parameter &rArr; read_correctPHxC &rArr; write_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_dc_parameter
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_ac_parameter
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rn8207_read_l3
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rn8207_read_l2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rn8207_read_l1
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam
</UL>

<P><STRONG><a name="[151]"></a>Read_energy</STRONG> (Thumb, 872 bytes, Stack size 16 bytes, rn8207.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Read_energy &rArr; read_8207 &rArr; uart6_send_data &rArr; Send_One_Byte6 &rArr; osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_mw
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam
</UL>

<P><STRONG><a name="[211]"></a>LCD_WR_DATA_16Bit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WR_DATA_16Bit &rArr; TFT_RS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_RS
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_CS
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_Drawbmp16
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh_Gram
</UL>

<P><STRONG><a name="[215]"></a>LCD_Refresh_Gram</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Refresh_Gram &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hand_action
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_action
</UL>

<P><STRONG><a name="[218]"></a>DelayNop_lcd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RESET
</UL>

<P><STRONG><a name="[216]"></a>LCD_RESET</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_RESET &rArr; TFT_REST
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_REST
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[219]"></a>LCD_WR_REG</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SCK
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_RS
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_CS
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_ReadWriteByte
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[21b]"></a>LCD_WR_DATA</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WR_DATA &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SCK
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_RS
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_CS
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_ReadWriteByte
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[21c]"></a>LCD_WriteReg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_WriteReg &rArr; LCD_WR_DATA &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetParam
</UL>

<P><STRONG><a name="[21d]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>

<P><STRONG><a name="[21e]"></a>LCD_SetWindows</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_Drawbmp16
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[21f]"></a>LCD_SetCursor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[220]"></a>LCD_SetParam</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetParam &rArr; LCD_WriteReg &rArr; LCD_WR_DATA &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[221]"></a>LCD_DrawPoint</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[222]"></a>LCD_Clear</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_Clear &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hand_action
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_action
</UL>

<P><STRONG><a name="[104]"></a>LCD_Init</STRONG> (Thumb, 504 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_Init &rArr; LCD_Clear &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_LEDA
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_SetSpeed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetParam
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RESET
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh_Gram
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[226]"></a>GUI_DrawPoint</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum2412
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_circle_8
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[227]"></a>LCD_DrawLine</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>

<P><STRONG><a name="[228]"></a>LCD_DrawRectangle</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[64e]"></a>LCD_DrawFillRectangle</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>_draw_circle_8</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_circle
</UL>

<P><STRONG><a name="[22a]"></a>gui_circle</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_draw_circle_8
</UL>

<P><STRONG><a name="[22b]"></a>LCD_ShowChar</STRONG> (Thumb, 1562 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_ShowChar &rArr; GUI_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[22c]"></a>LCD_ShowNum2412</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
</UL>

<P><STRONG><a name="[22d]"></a>LCD_ShowString</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[22f]"></a>mypow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mypow
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[22e]"></a>LCD_ShowNum</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[230]"></a>LCD_ShowxNum</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LCD_ShowxNum &rArr; LCD_ShowChar &rArr; GUI_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hand_action
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_action
</UL>

<P><STRONG><a name="[231]"></a>GUI_DrawFont16</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_DrawFont16 &rArr; GUI_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[232]"></a>GUI_DrawFont24</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_DrawFont24 &rArr; GUI_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[233]"></a>GUI_DrawFont32</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_DrawFont32 &rArr; GUI_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[234]"></a>Show_Str</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Show_Str &rArr; LCD_ShowChar &rArr; GUI_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_StrCenter
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hand_action
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_action
</UL>

<P><STRONG><a name="[235]"></a>Gui_StrCenter</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[236]"></a>Gui_Drawbmp16</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindows
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA_16Bit
</UL>

<P><STRONG><a name="[23c]"></a>DelayNop_SPI</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIv_WriteData
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_ReadWriteByte
</UL>

<P><STRONG><a name="[213]"></a>TFT_RS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_RS
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA_16Bit
</UL>

<P><STRONG><a name="[212]"></a>TFT_CS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_CS
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA_16Bit
</UL>

<P><STRONG><a name="[21a]"></a>TFT_SCK</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIv_WriteData
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[237]"></a>TFT_SDI</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIv_WriteData
</UL>

<P><STRONG><a name="[217]"></a>TFT_REST</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_REST
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RESET
</UL>

<P><STRONG><a name="[225]"></a>TFT_LEDA</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_LEDA
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[238]"></a>LCD_GPIOInit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, spi3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[223]"></a>SPI3_Init</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, spi3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI3_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_CS
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[224]"></a>SPI3_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI3_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[214]"></a>SPI3_ReadWriteByte</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, spi3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI3_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA_16Bit
</UL>

<P><STRONG><a name="[23d]"></a>SPIv_WriteData</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SDI
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNop_SPI
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SCK
</UL>

<P><STRONG><a name="[23e]"></a>auto_action</STRONG> (Thumb, 7066 bytes, Stack size 32 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = auto_action &rArr; Show_Str &rArr; LCD_ShowChar &rArr; GUI_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh_Gram
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[23f]"></a>hand_action</STRONG> (Thumb, 16550 bytes, Stack size 32 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = hand_action &rArr; Show_Str &rArr; LCD_ShowChar &rArr; GUI_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh_Gram
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[240]"></a>DisplayTask</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DisplayTask &rArr; hand_action &rArr; Show_Str &rArr; LCD_ShowChar &rArr; GUI_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_SetWindows &rArr; LCD_WriteRAM_Prepare &rArr; LCD_WR_REG &rArr; TFT_SCK
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hand_action
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.text)
</UL>
<P><STRONG><a name="[241]"></a>Auto_Jump_HandTask</STRONG> (Thumb, 744 bytes, Stack size 0 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = Auto_Jump_HandTask &rArr;  Auto_Jump_HandTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedown
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Jump_HandTask
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Jump_HandTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.text)
</UL>
<P><STRONG><a name="[15c]"></a>display_init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = display_init &rArr; osCreateTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
</UL>

<P><STRONG><a name="[24b]"></a>set16_to10</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
</UL>

<P><STRONG><a name="[24a]"></a>show_data</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, web.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
</UL>

<P><STRONG><a name="[242]"></a>httpServerTlsInitCallback</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, web.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetTrustedCaList
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetPrng
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetClientAuthMode
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetCache
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAddCertificate
</UL>

<P><STRONG><a name="[67]"></a>httpServerUriNotFoundCallback</STRONG> (Thumb, 7256 bytes, Stack size 696 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064 + Unknown Stack Size
<LI>Call Chain = httpServerUriNotFoundCallback &rArr; smtpSendMail &rArr; smtpSendData &rArr; smtpSendCommand &rArr; smtpRead &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite_2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWrite
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedown
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicresetdata
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_C
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_B
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_A
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_dc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strDuplicate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqorder
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mytok
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mimeGetType
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteStream
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteHeader
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCloseStream
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_data
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set16_to10
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> web.o(.text)
</UL>
<P><STRONG><a name="[250]"></a>httpsServerInit</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = httpsServerInit &rArr; httpServerInit &rArr; socketOpen &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNumber
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetFlagStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerStart
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerGetDefaultSettings
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_web_init
</UL>

<P><STRONG><a name="[157]"></a>http_web_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, web.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = http_web_init &rArr; httpsServerInit &rArr; httpServerInit &rArr; socketOpen &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpsServerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
</UL>

<P><STRONG><a name="[1a2]"></a>_swap16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, endian.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_extract_block
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_set_block
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6StringToAddr
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectSignHashAlgo
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectNamedCurve
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetExtension
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateRequest
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>

<P><STRONG><a name="[337]"></a>_swap32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, endian.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAckNak
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextUdpEntry
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextTcpConnEntry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIpNetToMediaEntry
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIpAddrEntry
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncodeUnsignedInt32
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncodeInt32
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1ProcessBlock
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ariaInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camelliaInit
</UL>

<P><STRONG><a name="[451]"></a>_swap64</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, endian.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _swap64
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncodeUnsignedInt64
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512ProcessBlock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
</UL>

<P><STRONG><a name="[64f]"></a>reverse8</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, endian.o(.text), UNUSED)

<P><STRONG><a name="[650]"></a>reverse16</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, endian.o(.text), UNUSED)

<P><STRONG><a name="[651]"></a>reverse32</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, endian.o(.text), UNUSED)

<P><STRONG><a name="[652]"></a>reverse64</STRONG> (Thumb, 240 bytes, Stack size 20 bytes, endian.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>osInitKernel</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_port_freertos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>osStartKernel</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = osStartKernel &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>osCreateTask</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = osCreateTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smtp_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_rtu
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNMP_trap_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftpd_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentStart
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerStart
</UL>

<P><STRONG><a name="[256]"></a>osDeleteTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_port_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[f8]"></a>osDelayTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_energy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_8207
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTask
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_data
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_One_Byte3
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_send_data
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_One_Byte6
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dhcp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNMPtrapTask
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMTPTask
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Mail
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTU
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modbus_data
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELNETS
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_menu
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTask
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Jump_HandTask
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[653]"></a>osSwitchTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_port_freertos.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>osSuspendAllTasks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSuspendAllTasks
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNMPtrapTask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerStart
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStop
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendLeaveGroupMessage
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpDumpConfig
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStop
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHelloDone
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendData
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpListenerTask
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateRequest
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHelloDone
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetVersion
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetCipherSuite
</UL>

<P><STRONG><a name="[10e]"></a>osResumeAllTasks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osResumeAllTasks &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNMPtrapTask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerStart
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStop
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendLeaveGroupMessage
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpDumpConfig
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStop
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHelloDone
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendData
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpListenerTask
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateRequest
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHelloDone
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetVersion
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetCipherSuite
</UL>

<P><STRONG><a name="[25a]"></a>osCreateEvent</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osCreateEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
</UL>

<P><STRONG><a name="[25e]"></a>osDeleteEvent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDeleteEvent &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
</UL>

<P><STRONG><a name="[260]"></a>osSetEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Tick
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthSendPacket
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInit
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpListenerTask
</UL>

<P><STRONG><a name="[261]"></a>osResetEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osResetEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
</UL>

<P><STRONG><a name="[262]"></a>osWaitForEvent</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osWaitForEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[263]"></a>osSetEventFromIsr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osSetEventFromIsr &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[265]"></a>osCreateSemaphore</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osCreateSemaphore &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
</UL>

<P><STRONG><a name="[267]"></a>osDeleteSemaphore</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_port_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[268]"></a>osWaitForSemaphore</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osWaitForSemaphore &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpListenerTask
</UL>

<P><STRONG><a name="[269]"></a>osReleaseSemaphore</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osReleaseSemaphore &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[182]"></a>osCreateMutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osCreateMutex &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitCache
</UL>

<P><STRONG><a name="[26b]"></a>osDeleteMutex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDeleteMutex &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentInit
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeCache
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRelease
</UL>

<P><STRONG><a name="[183]"></a>osAcquireMutex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osAcquireMutex &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibLock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetEnterpriseOid
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetContextEngine
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentLoadMib
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateUser
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGateway
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetDnsServer
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetDefaultGateway
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetSubnetMask
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetHostAddr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInvokeLinkChangeCallback
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDetachLinkChangeCallback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netAttachLinkChangeCallback
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetLinkState
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetExtIntDriver
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetUartDriver
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetSpiDriver
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyAddr
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetProxy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceId
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetEui64
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetEui64
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetMacAddr
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipJoinMulticastGroup
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStop
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6EnableMulticastEchoRequest
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetDnsServer
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetDnsServer
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetDefaultRouter
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetDefaultRouter
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetPrefix
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetPrefix
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAnycastAddr
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAnycastAddr
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetGlobalAddr
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetGlobalAddr
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetLinkLocalAddr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetLinkLocalAddr
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetMtu
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetMtu
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientGetState
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStop
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetEvents
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketUnregisterEvents
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2Lock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentDeleteUser
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetContextName
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentGetEngineBoots
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetEngineBoots
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentUnloadMib
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentTask
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveToCache
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFindCache
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowAddEntropy
</UL>

<P><STRONG><a name="[184]"></a>osReleaseMutex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibUnlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetEnterpriseOid
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetContextEngine
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentLoadMib
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateUser
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGateway
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetDnsServer
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetDefaultGateway
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetSubnetMask
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetHostAddr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInvokeLinkChangeCallback
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netDetachLinkChangeCallback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netAttachLinkChangeCallback
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetLinkState
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetExtIntDriver
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetUartDriver
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetSpiDriver
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyAddr
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetProxy
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceId
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetEui64
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetEui64
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetMacAddr
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipJoinMulticastGroup
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStop
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6EnableMulticastEchoRequest
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetDnsServer
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetDnsServer
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetDefaultRouter
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetDefaultRouter
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetPrefix
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetPrefix
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAnycastAddr
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAnycastAddr
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetGlobalAddr
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetGlobalAddr
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetLinkLocalAddr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetLinkLocalAddr
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetMtu
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetMtu
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientGetState
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStop
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetEvents
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketUnregisterEvents
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2Unlock
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentDeleteUser
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetContextName
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentGetEngineBoots
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetEngineBoots
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentUnloadMib
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentTask
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveToCache
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFindCache
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowAddEntropy
</UL>

<P><STRONG><a name="[186]"></a>osGetSystemTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibGetCurrentTime
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpJoinGroup
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldTick
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdatePrefixList
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddAddr
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessQueryMessage
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAckNak
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerElapsed
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSession
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetSysUpTime
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpRefreshEngineTime
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetEngineBoots
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFindCache
</UL>

<P><STRONG><a name="[26d]"></a>osAllocMem</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strDuplicate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAddCertificate
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitHandshakeHash
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeHandshakeHash
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcPrivateKey
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDsaPrivateKey
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadCertificate
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetServerName
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Compute
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Compute
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Compute
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224Compute
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Compute
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Compute
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitCache
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslExpandKey
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf2
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Decrypt
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateRequest
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDhParameters
</UL>

<P><STRONG><a name="[26e]"></a>osFreeMem</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_port_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAddCertificate
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitHandshakeHash
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeHandshakeHash
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcPrivateKey
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDsaPrivateKey
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadCertificate
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Compute
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Compute
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Compute
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224Compute
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Compute
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Compute
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeCache
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitCache
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslExpandKey
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf2
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Decrypt
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateRequest
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDhParameters
</UL>

<P><STRONG><a name="[654]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_port_freertos.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>vAssertCalled</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os_port_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[270]"></a>formatSystemTime</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, date_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpDumpConfig
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[271]"></a>formatDate</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, date_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[273]"></a>computeDayOfWeek</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, date_time.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertUnixTimeToDate
</UL>

<P><STRONG><a name="[272]"></a>convertUnixTimeToDate</STRONG> (Thumb, 216 bytes, Stack size 36 bytes, date_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeDayOfWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentDate
</UL>

<P><STRONG><a name="[275]"></a>getCurrentUnixTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, date_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentDate
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
</UL>

<P><STRONG><a name="[274]"></a>getCurrentDate</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, date_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentUnixTime
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertUnixTimeToDate
</UL>

<P><STRONG><a name="[56c]"></a>convertDateToUnixTime</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, date_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = convertDateToUnixTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[1e3]"></a>strDuplicate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = strDuplicate &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Mail
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
</UL>

<P><STRONG><a name="[276]"></a>strTrimWhitespace</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strTrimWhitespace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessEchoCommand
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessExecCommand
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
</UL>

<P><STRONG><a name="[278]"></a>strRemoveTrailingSpace</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadChunkSize
</UL>

<P><STRONG><a name="[655]"></a>strReplaceChar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, str.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>strSafeCopy</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = strSafeCopy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetProxy
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpParseAuthField
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
</UL>

<P><STRONG><a name="[27a]"></a>resGetData</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, resource_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = resGetData &rArr; strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiExecuteScript
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendResponse
</UL>

<P><STRONG><a name="[27c]"></a>resSearchFile</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, resource_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[283]"></a>pathIsAbsolute</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, path.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathRemoveSlash
</UL>

<P><STRONG><a name="[656]"></a>pathIsRelative</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, path.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>pathFindFileName</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, path.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[27e]"></a>pathCanonicalize</STRONG> (Thumb, 482 bytes, Stack size 24 bytes, path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pathCanonicalize &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpGetAbsolutePath
</UL>

<P><STRONG><a name="[280]"></a>pathAddSlash</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pathAddSlash &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathCombine
</UL>

<P><STRONG><a name="[282]"></a>pathRemoveSlash</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, path.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathIsAbsolute
</UL>

<P><STRONG><a name="[284]"></a>pathCombine</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, path.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pathCombine &rArr; pathAddSlash &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathAddSlash
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpGetAbsolutePath
</UL>

<P><STRONG><a name="[285]"></a>pathMatch</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, path.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathMatch
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathMatch
</UL>

<P><STRONG><a name="[287]"></a>netTick</STRONG> (Thumb, 586 bytes, Stack size 8 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = netTick &rArr; ndpTick &rArr; ndpUpdateAddrList &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTick
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldTick
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
</UL>

<P><STRONG><a name="[292]"></a>netTask</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = netTask &rArr; netTick &rArr; ndpTick &rArr; ndpUpdateAddrList &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>netInit</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = netInit &rArr; osCreateTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpInit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolInit
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>netSetMacAddr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = netSetMacAddr &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macAddrToEui64
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[299]"></a>netGetMacAddr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[29a]"></a>netSetEui64</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[29b]"></a>netGetEui64</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[29c]"></a>netSetInterfaceId</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[110]"></a>netSetInterfaceName</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = netSetInterfaceName &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>netSetHostname</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = netSetHostname &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29d]"></a>netSetProxy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
</UL>

<P><STRONG><a name="[112]"></a>netSetDriver</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = netSetDriver &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>netSetPhyDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = netSetPhyDriver &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29e]"></a>netSetPhyAddr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[29f]"></a>netSetSpiDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[2a0]"></a>netSetUartDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[2a1]"></a>netSetExtIntDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[2a2]"></a>netGetLinkState</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[116]"></a>netConfigInterface</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = netConfigInterface &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpInit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldInit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38b]"></a>netGetDefaultInterface</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientGetDefaultSettings
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipLeaveMulticastGroup
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipJoinMulticastGroup
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGetDefaultSettings
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[2d0]"></a>netInitRand</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2ae]"></a>netGetRand</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldRand
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpRand
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
</UL>

<P><STRONG><a name="[2ad]"></a>netGetRandRange</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netGetRandRange
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
</UL>

<P><STRONG><a name="[2af]"></a>netAttachLinkChangeCallback</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[2b0]"></a>netDetachLinkChangeCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[2b1]"></a>netInvokeLinkChangeCallback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netInvokeLinkChangeCallback &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[293]"></a>memPoolInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[2b2]"></a>memPoolAlloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, net_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[2b3]"></a>memPoolFree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
</UL>

<P><STRONG><a name="[657]"></a>memPoolGetStats</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_mem.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>netBufferSetLength</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, net_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushFragQueue
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[1a9]"></a>netBufferFree</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_send_ack_packet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendLeaveGroupMessage
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[2b5]"></a>netBufferAlloc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, net_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
</UL>

<P><STRONG><a name="[2be]"></a>netBufferGetLength</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthSendPacket
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessDestUnreachable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
</UL>

<P><STRONG><a name="[2d4]"></a>netBufferAt</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, net_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessDestUnreachable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendLeaveGroupMessage
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[306]"></a>netBufferConcat</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, net_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
</UL>

<P><STRONG><a name="[2b6]"></a>netBufferCopy</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, net_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
</UL>

<P><STRONG><a name="[1a7]"></a>netBufferAppend</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, net_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_send_ack_packet
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>

<P><STRONG><a name="[2b7]"></a>netBufferWrite</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, net_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netBufferWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteTxBuffer
</UL>

<P><STRONG><a name="[1ab]"></a>netBufferRead</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, net_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netBufferRead
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_wrq_recv_callback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthSendPacket
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
</UL>

<P><STRONG><a name="[2bb]"></a>stm32f4x7EthInitDmaDesc</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f4x7EthInitDmaDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInit
</UL>

<P><STRONG><a name="[2b8]"></a>stm32f4x7EthInitGpio</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = stm32f4x7EthInitGpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInit
</UL>

<P><STRONG><a name="[73]"></a>stm32f4x7EthInit</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = stm32f4x7EthInit &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInitGpio
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInitDmaDesc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4x7_eth.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>stm32f4x7EthTick</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f4x7EthTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4x7_eth.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>stm32f4x7EthEnableIrq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f4x7EthEnableIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4x7_eth.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>stm32f4x7EthDisableIrq</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f4x7EthDisableIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4x7_eth.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>ETH_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ETH_IRQHandler &rArr; osSetEventFromIsr &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2bc]"></a>stm32f4x7EthReceivePacket</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stm32f4x7EthReceivePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthEventHandler
</UL>

<P><STRONG><a name="[77]"></a>stm32f4x7EthEventHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = stm32f4x7EthEventHandler &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4x7_eth.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>stm32f4x7EthSendPacket</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = stm32f4x7EthSendPacket &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4x7_eth.o(.constdata)
</UL>
<P><STRONG><a name="[2bf]"></a>stm32f4x7EthCalcCrc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32f4x7EthCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthSetMulticastFilter
</UL>

<P><STRONG><a name="[79]"></a>stm32f4x7EthSetMulticastFilter</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stm32f4x7EthSetMulticastFilter &rArr; stm32f4x7EthCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthCalcCrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4x7_eth.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>stm32f4x7EthUpdateMacConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4x7_eth.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>stm32f4x7EthWritePhyReg</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stm32f4x7EthWritePhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4x7_eth.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>stm32f4x7EthReadPhyReg</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4x7_eth.o(.constdata)
</UL>
<P><STRONG><a name="[2c2]"></a>lan8720DumpPhyReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lan8720.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
</UL>

<P><STRONG><a name="[2c1]"></a>lan8720ReadPhyReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lan8720ReadPhyReg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Tick
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
</UL>

<P><STRONG><a name="[2c0]"></a>lan8720WritePhyReg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lan8720WritePhyReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
</UL>

<P><STRONG><a name="[7d]"></a>lan8720Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = lan8720Init &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720WritePhyReg
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720ReadPhyReg
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720DumpPhyReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>lan8720Tick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lan8720Tick &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720ReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>lan8720EnableIrq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lan8720.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>lan8720DisableIrq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lan8720.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>lan8720EventHandler</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = lan8720EventHandler &rArr; nicNotifyLinkChange &rArr; ipv6LinkChangeEvent &rArr; slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720ReadPhyReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720.o(.constdata)
</UL>
<P><STRONG><a name="[288]"></a>nicTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nicTick
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[2c4]"></a>nicSendPacket</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nicSendPacket &rArr; osWaitForEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[2d7]"></a>nicSetMulticastFilter</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nicSetMulticastFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMulticastAddr
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMulticastAddr
</UL>

<P><STRONG><a name="[2bd]"></a>nicProcessPacket</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, nic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = nicProcessPacket &rArr; ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthEventHandler
</UL>

<P><STRONG><a name="[2c3]"></a>nicNotifyLinkChange</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, nic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = nicNotifyLinkChange &rArr; ipv6LinkChangeEvent &rArr; slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInvokeLinkChangeCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
</UL>

<P><STRONG><a name="[2a3]"></a>ethInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ethInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[2cc]"></a>ethCheckDestAddr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ethCheckDestAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2cf]"></a>ethCalcCrc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ethCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2ce]"></a>ethDumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2c5]"></a>ethProcessFrame</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = ethProcessFrame &rArr; ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDumpHeader
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
</UL>

<P><STRONG><a name="[2d5]"></a>ethCalcCrcEx</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ethCalcCrcEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[2d3]"></a>ethSendFrame</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrcEx
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDumpHeader
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[2d6]"></a>ethAcceptMulticastAddr</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethAcceptMulticastAddr &rArr; nicSetMulticastFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSetMulticastFilter
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[2d8]"></a>ethDropMulticastAddr</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethDropMulticastAddr &rArr; nicSetMulticastFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSetMulticastFilter
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LeaveMulticastGroup
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
</UL>

<P><STRONG><a name="[2d9]"></a>ethAllocBuffer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
</UL>

<P><STRONG><a name="[114]"></a>macStringToAddr</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = macStringToAddr &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2da]"></a>macAddrToString</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ethernet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[298]"></a>macAddrToEui64</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ethernet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
</UL>

<P><STRONG><a name="[2a5]"></a>arpInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arpInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[2db]"></a>arpFlushQueuedPackets</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
</UL>

<P><STRONG><a name="[2dc]"></a>arpFlushCache</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = arpFlushCache &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[2dd]"></a>arpCreateEntry</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = arpCreateEntry &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[2e3]"></a>arpFindEntry</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arpFindEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetIpNetToMediaEntry
</UL>

<P><STRONG><a name="[2de]"></a>arpSendQueuedPackets</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = arpSendQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[2e1]"></a>arpDumpPacket</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[2df]"></a>arpSendRequest</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[2e2]"></a>arpResolve</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[2e4]"></a>arpEnqueuePacket</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = arpEnqueuePacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[289]"></a>arpTick</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = arpTick &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[2e5]"></a>arpProcessReply</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = arpProcessReply &rArr; arpSendQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[2e6]"></a>arpSendReply</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
</UL>

<P><STRONG><a name="[2e7]"></a>arpProcessRequest</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = arpProcessRequest &rArr; arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[2d1]"></a>arpProcessPacket</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = arpProcessPacket &rArr; arpProcessRequest &rArr; arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2e8]"></a>arpSendProbe</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>

<P><STRONG><a name="[2a4]"></a>ipv4Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv4Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[11b]"></a>ipv4SetHostAddr</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ipv4SetHostAddr &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e9]"></a>ipv4GetHostAddr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ipv4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[11c]"></a>ipv4SetSubnetMask</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ipv4SetSubnetMask &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ea]"></a>ipv4GetSubnetMask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ipv4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[11d]"></a>ipv4SetDefaultGateway</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ipv4SetDefaultGateway &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2eb]"></a>ipv4GetDefaultGateway</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ipv4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[11e]"></a>ipv4SetDnsServer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ipv4SetDnsServer &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ec]"></a>ipv4GetDnsServer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ipv4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[3f1]"></a>ipv4GetBroadcastAddr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ipv4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[2c7]"></a>ipv4LinkChangeEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[2f1]"></a>ipv4DumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
</UL>

<P><STRONG><a name="[2f0]"></a>ipv4ProcessDatagram</STRONG> (Thumb, 260 bytes, Stack size 80 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[2f8]"></a>ipv4CheckDestAddr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4CheckDestAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[2f7]"></a>ipv4CheckSourceAddr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ipv4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[2d2]"></a>ipv4ProcessPacket</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2fd]"></a>ipv4MapMulticastAddrToMac</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipv4MapMulticastAddrToMac
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LeaveMulticastGroup
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[2fb]"></a>ipv4SendPacket</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[2fe]"></a>ipv4SendDatagram</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendLeaveGroupMessage
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[300]"></a>ipv4GetAddrScope</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ipv4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
</UL>

<P><STRONG><a name="[2e0]"></a>ipv4SelectSourceAddr</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv4SelectSourceAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetAddrScope
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
</UL>

<P><STRONG><a name="[2a7]"></a>ipv4JoinMulticastGroup</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = ipv4JoinMulticastGroup &rArr; igmpJoinGroup &rArr; igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpJoinGroup
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMulticastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipJoinMulticastGroup
</UL>

<P><STRONG><a name="[302]"></a>ipv4LeaveMulticastGroup</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ipv4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLeaveGroup
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMulticastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipLeaveMulticastGroup
</UL>

<P><STRONG><a name="[11a]"></a>ipv4StringToAddr</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv4StringToAddr &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
</UL>

<P><STRONG><a name="[304]"></a>ipv4AddrToString</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ipv4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ipv4AddrToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpDumpConfig
</UL>

<P><STRONG><a name="[2ff]"></a>ipv4FragmentDatagram</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, ipv4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[307]"></a>ipv4FindHole</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipv4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4FindHole
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
</UL>

<P><STRONG><a name="[309]"></a>ipv4DumpHoleList</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4_frag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[308]"></a>ipv4SearchFragQueue</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ipv4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ipv4SearchFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHoleList
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[2fa]"></a>ipv4ReassembleDatagram</STRONG> (Thumb, 668 bytes, Stack size 64 bytes, ipv4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHoleList
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[28a]"></a>ipv4FragTick</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ipv4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ipv4FragTick &rArr; icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[2ed]"></a>ipv4FlushFragQueue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ipv4_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ipv4FlushFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[30b]"></a>icmpDumpEchoMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[30a]"></a>icmpProcessEchoRequest</STRONG> (Thumb, 250 bytes, Stack size 72 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpDumpEchoMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[30c]"></a>icmpDumpMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[2f2]"></a>icmpProcessMessage</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = icmpProcessMessage &rArr; icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpDumpMessage
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[30d]"></a>icmpDumpErrorMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
</UL>

<P><STRONG><a name="[2f6]"></a>icmpSendErrorMessage</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpDumpErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
</UL>

<P><STRONG><a name="[2a6]"></a>igmpInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = igmpInit &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[30f]"></a>igmpDumpMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, igmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendLeaveGroupMessage
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
</UL>

<P><STRONG><a name="[30e]"></a>igmpSendReportMessage</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpDumpMessage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpJoinGroup
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
</UL>

<P><STRONG><a name="[301]"></a>igmpJoinGroup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = igmpJoinGroup &rArr; igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[310]"></a>igmpSendLeaveGroupMessage</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, igmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpDumpMessage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLeaveGroup
</UL>

<P><STRONG><a name="[303]"></a>igmpLeaveGroup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, igmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendLeaveGroupMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LeaveMulticastGroup
</UL>

<P><STRONG><a name="[28b]"></a>igmpTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = igmpTick &rArr; igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[2ee]"></a>igmpLinkChangeEvent</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = igmpLinkChangeEvent &rArr; igmpSendReportMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[313]"></a>igmpProcessReportMessage</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = igmpProcessReportMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
</UL>

<P><STRONG><a name="[311]"></a>igmpRand</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmpRand
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessQueryMessage
</UL>

<P><STRONG><a name="[312]"></a>igmpProcessQueryMessage</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = igmpProcessQueryMessage &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpRand
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
</UL>

<P><STRONG><a name="[2f3]"></a>igmpProcessMessage</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = igmpProcessMessage &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessQueryMessage
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessReportMessage
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpDumpMessage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[2a9]"></a>ipv6Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv6Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[314]"></a>ipv6SetMtu</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[315]"></a>ipv6GetMtu</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[316]"></a>ipv6SetLinkLocalAddr</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>

<P><STRONG><a name="[318]"></a>ipv6GetLinkLocalAddr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[319]"></a>ipv6SetGlobalAddr</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>

<P><STRONG><a name="[31a]"></a>ipv6GetGlobalAddr</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2ac]"></a>ipv6JoinMulticastGroup</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMulticastAddr
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6MapMulticastAddrToMac
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipJoinMulticastGroup
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAnycastAddr
</UL>

<P><STRONG><a name="[31d]"></a>ipv6LeaveMulticastGroup</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = ipv6LeaveMulticastGroup &rArr; mldStopListening &rArr; mldSendListenerDone &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMulticastAddr
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStopListening
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6MapMulticastAddrToMac
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipLeaveMulticastGroup
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAnycastAddr
</UL>

<P><STRONG><a name="[31f]"></a>ipv6SetAnycastAddr</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ComputeSolicitedNodeAddr
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[321]"></a>ipv6GetAnycastAddr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[322]"></a>ipv6SetPrefix</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[323]"></a>ipv6GetPrefix</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[324]"></a>ipv6SetDefaultRouter</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[325]"></a>ipv6GetDefaultRouter</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[326]"></a>ipv6SetDnsServer</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[327]"></a>ipv6GetDnsServer</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ipv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2c8]"></a>ipv6LinkChangeEvent</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = ipv6LinkChangeEvent &rArr; slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpLinkChangeEvent
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushPrefixList
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushFragQueue
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDefaultRouterList
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushAddrList
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[33a]"></a>ipv6ParseEspHeader</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipv6ParseEspHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[339]"></a>ipv6ParseAuthHeader</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipv6ParseAuthHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[32f]"></a>ipv6ParseRoutingHeader</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ipv6ParseRoutingHeader &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[331]"></a>ipv6ParseOptions</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ipv6ParseOptions &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
</UL>

<P><STRONG><a name="[332]"></a>ipv6ParseDestOptHeader</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ipv6ParseDestOptHeader &rArr; ipv6ParseOptions &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[333]"></a>ipv6ParseHopByHopOptHeader</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = ipv6ParseHopByHopOptHeader &rArr; ipv6ParseOptions &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[334]"></a>ipv6DumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[2c6]"></a>ipv6ProcessPacket</STRONG> (Thumb, 544 bytes, Stack size 96 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = ipv6ProcessPacket &rArr; icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckSourceAddr
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckDestAddr
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6DumpHeader
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseDestOptHeader
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseAuthHeader
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseEspHeader
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
</UL>

<P><STRONG><a name="[33d]"></a>ipv6SendPacket</STRONG> (Thumb, 530 bytes, Stack size 80 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6MapMulticastAddrToMac
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckSourceAddr
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6DumpHeader
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>

<P><STRONG><a name="[343]"></a>ipv6SendDatagram</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetPathMtu
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>

<P><STRONG><a name="[346]"></a>ipv6StringToAddr</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ipv6StringToAddr &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
</UL>

<P><STRONG><a name="[347]"></a>ipv6AddrToString</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, ipv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ipv6AddrToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[345]"></a>ipv6FragmentDatagram</STRONG> (Thumb, 234 bytes, Stack size 80 bytes, ipv6_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>

<P><STRONG><a name="[348]"></a>ipv6FindHole</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipv6_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6FindHole
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
</UL>

<P><STRONG><a name="[34a]"></a>ipv6DumpHoleList</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv6_frag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
</UL>

<P><STRONG><a name="[349]"></a>ipv6SearchFragQueue</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, ipv6_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ipv6SearchFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6DumpHoleList
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
</UL>

<P><STRONG><a name="[338]"></a>ipv6ParseFragmentHeader</STRONG> (Thumb, 706 bytes, Stack size 88 bytes, ipv6_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ipv6ParseFragmentHeader &rArr;  ipv6ProcessPacket (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6DumpHoleList
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[28d]"></a>ipv6FragTick</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ipv6_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ipv6FragTick &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FindHole
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6DumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[32b]"></a>ipv6FlushFragQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ipv6_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ipv6FlushFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[34b]"></a>ipv6GetAddrState</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ipv6_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[320]"></a>ipv6ComputeSolicitedNodeAddr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6ComputeSolicitedNodeAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAnycastAddr
</UL>

<P><STRONG><a name="[317]"></a>ipv6SetAddr</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ComputeSolicitedNodeAddr
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveAddr
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddAddr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushAddrList
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetGlobalAddr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetLinkLocalAddr
</UL>

<P><STRONG><a name="[34c]"></a>ipv6AddAddr</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, ipv6_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[34d]"></a>ipv6RemoveAddr</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ipv6_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[34e]"></a>ipv6CompPrefix</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsOnLink
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
</UL>

<P><STRONG><a name="[34f]"></a>ipv6AddPrefix</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ipv6AddPrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
</UL>

<P><STRONG><a name="[350]"></a>ipv6RemovePrefix</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ipv6RemovePrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdatePrefixList
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
</UL>

<P><STRONG><a name="[351]"></a>ipv6AddDefaultRouter</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipv6AddDefaultRouter &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
</UL>

<P><STRONG><a name="[352]"></a>ipv6RemoveDefaultRouter</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipv6RemoveDefaultRouter &rArr; ndpFlushDestCache &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[328]"></a>ipv6FlushAddrList</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ipv6FlushAddrList &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
</UL>

<P><STRONG><a name="[329]"></a>ipv6FlushPrefixList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6FlushPrefixList
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[32a]"></a>ipv6FlushDefaultRouterList</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6FlushDefaultRouterList
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[354]"></a>ipv6FlushDnsServerList</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipv6FlushDnsServerList &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
</UL>

<P><STRONG><a name="[335]"></a>ipv6CheckSourceAddr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipv6_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[336]"></a>ipv6CheckDestAddr</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv6CheckDestAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[358]"></a>ipv6GetCommonPrefixLength</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv6GetCommonPrefixLength
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
</UL>

<P><STRONG><a name="[356]"></a>ipv6GetMulticastAddrScope</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipv6_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAddrScope
</UL>

<P><STRONG><a name="[355]"></a>ipv6GetAddrScope</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv6GetAddrScope &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetMulticastAddrScope
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
</UL>

<P><STRONG><a name="[357]"></a>ipv6SelectSourceAddr</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ipv6SelectSourceAddr &rArr; ipv6GetAddrScope &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAddrScope
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetCommonPrefixLength
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>

<P><STRONG><a name="[359]"></a>ipv6IsOnLink</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ipv6IsOnLink &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
</UL>

<P><STRONG><a name="[33c]"></a>ipv6IsTentativeAddr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv6IsTentativeAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[35a]"></a>ipv6IsAnycastAddr</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ipv6_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv6IsAnycastAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>

<P><STRONG><a name="[31b]"></a>ipv6MapMulticastAddrToMac</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ipv6_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
</UL>

<P><STRONG><a name="[344]"></a>ipv6GetPathMtu</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ipv6_pmtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ipv6GetPathMtu &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>

<P><STRONG><a name="[35b]"></a>ipv6UpdatePathMtu</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ipv6_pmtu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ipv6UpdatePathMtu &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
</UL>

<P><STRONG><a name="[35c]"></a>icmpv6EnableMulticastEchoRequest</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, icmpv6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[35e]"></a>icmpv6DumpEchoMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmpv6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
</UL>

<P><STRONG><a name="[35d]"></a>icmpv6ProcessEchoRequest</STRONG> (Thumb, 260 bytes, Stack size 104 bytes, icmpv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = icmpv6ProcessEchoRequest &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6DumpEchoMessage
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[361]"></a>icmpv6DumpPacketTooBigMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmpv6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
</UL>

<P><STRONG><a name="[360]"></a>icmpv6ProcessPacketTooBig</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, icmpv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = icmpv6ProcessPacketTooBig &rArr; ipv6UpdatePathMtu &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6DumpPacketTooBigMessage
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdatePathMtu
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[363]"></a>icmpv6DumpDestUnreachableMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmpv6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessDestUnreachable
</UL>

<P><STRONG><a name="[362]"></a>icmpv6ProcessDestUnreachable</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, icmpv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icmpv6ProcessDestUnreachable
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6DumpDestUnreachableMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[364]"></a>icmpv6DumpMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmpv6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[33b]"></a>icmpv6ProcessMessage</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, icmpv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = icmpv6ProcessMessage &rArr; ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6DumpMessage
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessDestUnreachable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessPacketTooBig
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[36b]"></a>icmpv6DumpErrorMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmpv6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>

<P><STRONG><a name="[330]"></a>icmpv6SendErrorMessage</STRONG> (Thumb, 352 bytes, Stack size 104 bytes, icmpv6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6DumpErrorMessage
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragTick
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseFragmentHeader
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseHopByHopOptHeader
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseOptions
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ParseRoutingHeader
</UL>

<P><STRONG><a name="[2ab]"></a>mldInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[36d]"></a>mldDumpMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
</UL>

<P><STRONG><a name="[36c]"></a>mldSendListenerReport</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, mld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldDumpMessage
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldTick
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
</UL>

<P><STRONG><a name="[31c]"></a>mldStartListening</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
</UL>

<P><STRONG><a name="[36e]"></a>mldSendListenerDone</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, mld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = mldSendListenerDone &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldDumpMessage
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStopListening
</UL>

<P><STRONG><a name="[31e]"></a>mldStopListening</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = mldStopListening &rArr; mldSendListenerDone &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
</UL>

<P><STRONG><a name="[28e]"></a>mldTick</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = mldTick &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[32c]"></a>mldLinkChangeEvent</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = mldLinkChangeEvent &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[36f]"></a>mldRand</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mldRand
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
</UL>

<P><STRONG><a name="[365]"></a>mldProcessListenerQuery</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, mld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mldProcessListenerQuery &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldRand
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldDumpMessage
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[366]"></a>mldProcessListenerReport</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, mld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mldProcessListenerReport &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldDumpMessage
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[2aa]"></a>ndpInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ndpInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[372]"></a>ndpDumpNeighborSolMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ndp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
</UL>

<P><STRONG><a name="[370]"></a>ndpSendNeighborSol</STRONG> (Thumb, 274 bytes, Stack size 88 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ndpSendNeighborSol &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpNeighborSolMessage
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ComputeSolicitedNodeAddr
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
</UL>

<P><STRONG><a name="[341]"></a>ndpResolve</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[342]"></a>ndpEnqueuePacket</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ndpEnqueuePacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[376]"></a>ndpDumpRouterSolMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ndp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
</UL>

<P><STRONG><a name="[375]"></a>ndpSendRouterSol</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ndpSendRouterSol &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpRouterSolMessage
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[28f]"></a>ndpTick</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = ndpTick &rArr; ndpUpdateAddrList &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdatePrefixList
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateAddrList
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[32d]"></a>ndpLinkChangeEvent</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ndpLinkChangeEvent &rArr; ndpFlushNeighborCache &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushNeighborCache
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[37c]"></a>ndpDumpRouterAdvMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ndp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
</UL>

<P><STRONG><a name="[367]"></a>ndpProcessRouterAdv</STRONG> (Thumb, 578 bytes, Stack size 64 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = ndpProcessRouterAdv &rArr; slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpParsePrefixInfoOption
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpRouterAdvMessage
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[383]"></a>ndpDumpNeighborAdvMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ndp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[382]"></a>ndpSendNeighborAdv</STRONG> (Thumb, 368 bytes, Stack size 88 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = ndpSendNeighborAdv &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpNeighborAdvMessage
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
</UL>

<P><STRONG><a name="[368]"></a>ndpProcessNeighborSol</STRONG> (Thumb, 676 bytes, Stack size 72 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ndpProcessNeighborSol &rArr; ndpSendNeighborAdv &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpNeighborSolMessage
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[369]"></a>ndpProcessNeighborAdv</STRONG> (Thumb, 962 bytes, Stack size 64 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ndpProcessNeighborAdv &rArr; ndpSendQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpNeighborAdvMessage
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[384]"></a>ndpDumpRedirectMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ndp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
</UL>

<P><STRONG><a name="[36a]"></a>ndpProcessRedirect</STRONG> (Thumb, 484 bytes, Stack size 56 bytes, ndp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ndpProcessRedirect &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendQueuedPackets
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpIsFirstHopRouter
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCheckOptions
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpRedirectMessage
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
</UL>

<P><STRONG><a name="[386]"></a>ndpSendRedirect</STRONG> (Thumb, 436 bytes, Stack size 120 bytes, ndp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpDumpRedirectMessage
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[387]"></a>ndpFlushQueuedPackets</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ndp_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushNeighborCache
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
</UL>

<P><STRONG><a name="[374]"></a>ndpCreateNeighborCacheEntry</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ndp_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
</UL>

<P><STRONG><a name="[373]"></a>ndpFindNeighborCacheEntry</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ndp_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpEnqueuePacket
</UL>

<P><STRONG><a name="[377]"></a>ndpUpdateNeighborCache</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, ndp_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ndpUpdateNeighborCache &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[37b]"></a>ndpFlushNeighborCache</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ndp_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ndpFlushNeighborCache &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpLinkChangeEvent
</UL>

<P><STRONG><a name="[37f]"></a>ndpSendQueuedPackets</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ndp_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ndpSendQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[340]"></a>ndpCreateDestCacheEntry</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ndp_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndpCreateDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[33e]"></a>ndpFindDestCacheEntry</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ndp_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpIsFirstHopRouter
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6UpdatePathMtu
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetPathMtu
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[353]"></a>ndpFlushDestCache</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ndp_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ndpFlushDestCache &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpLinkChangeEvent
</UL>

<P><STRONG><a name="[380]"></a>ndpParsePrefixInfoOption</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ndp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ndpParsePrefixInfoOption &rArr; ipv6AddPrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
</UL>

<P><STRONG><a name="[378]"></a>ndpUpdateAddrList</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, ndp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ndpUpdateAddrList &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[379]"></a>ndpUpdatePrefixList</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ndp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ndpUpdatePrefixList &rArr; ipv6RemovePrefix &rArr; ipv6CompPrefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[37a]"></a>ndpUpdateDefaultRouterList</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ndp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ndpUpdateDefaultRouterList &rArr; ndpFlushDestCache &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpTick
</UL>

<P><STRONG><a name="[389]"></a>ndpSelectDefaultRouter</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ndp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ndpSelectDefaultRouter &rArr; ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
</UL>

<P><STRONG><a name="[385]"></a>ndpIsFirstHopRouter</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ndp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ndpIsFirstHopRouter &rArr; ndpFindDestCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
</UL>

<P><STRONG><a name="[33f]"></a>ndpSelectNextHop</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ndp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ndpSelectNextHop &rArr; ndpSelectDefaultRouter &rArr; ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsOnLink
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
</UL>

<P><STRONG><a name="[388]"></a>ndpUpdateNextHop</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ndp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ndpUpdateNextHop &rArr; ndpSelectNextHop &rArr; ndpSelectDefaultRouter &rArr; ndpFindNeighborCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
</UL>

<P><STRONG><a name="[371]"></a>ndpAddOption</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ndp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndpAddOption
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
</UL>

<P><STRONG><a name="[37e]"></a>ndpGetOption</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ndp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ndpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[37d]"></a>ndpCheckOptions</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ndp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndpCheckOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
</UL>

<P><STRONG><a name="[38a]"></a>slaacGetDefaultSettings</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, slaac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
</UL>

<P><STRONG><a name="[38c]"></a>slaacInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, slaac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[38d]"></a>slaacGenerateLinkLocalAddr</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, slaac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacLinkChangeEvent
</UL>

<P><STRONG><a name="[38e]"></a>slaacStart</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, slaac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDnsServerList
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushAddrList
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[38f]"></a>slaacStop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, slaac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[32e]"></a>slaacLinkChangeEvent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, slaac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = slaacLinkChangeEvent &rArr; slaacGenerateLinkLocalAddr &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacGenerateLinkLocalAddr
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDnsServerList
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LinkChangeEvent
</UL>

<P><STRONG><a name="[390]"></a>slaacDumpConfig</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, slaac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = slaacDumpConfig &rArr; ipv6AddrToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
</UL>

<P><STRONG><a name="[391]"></a>slaacParsePrefixInfoOption</STRONG> (Thumb, 734 bytes, Stack size 80 bytes, slaac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
</UL>

<P><STRONG><a name="[381]"></a>slaacParseRouterAdv</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, slaac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = slaacParseRouterAdv &rArr; slaacParsePrefixInfoOption &rArr; ipv6SetAddr &rArr; ipv6JoinMulticastGroup &rArr; mldStartListening &rArr; mldSendListenerReport &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParsePrefixInfoOption
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpGetOption
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
</UL>

<P><STRONG><a name="[392]"></a>ipSendDatagram</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[393]"></a>ipSelectSourceAddr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ipSelectSourceAddr &rArr; ipv6SelectSourceAddr &rArr; ipv6GetAddrScope &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
</UL>

<P><STRONG><a name="[2f9]"></a>ipCalcChecksum</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[2fc]"></a>ipCalcChecksumEx</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipCalcChecksumEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendLeaveGroupMessage
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[658]"></a>ipCalcUpperLayerChecksum</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, ip.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>ipCalcUpperLayerChecksumEx</STRONG> (Thumb, 74 bytes, Stack size 28 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ipCalcUpperLayerChecksumEx &rArr; ipCalcChecksumEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessMessage
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[305]"></a>ipAllocBuffer</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FragmentDatagram
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendLeaveGroupMessage
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[394]"></a>ipJoinMulticastGroup</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
</UL>

<P><STRONG><a name="[395]"></a>ipLeaveMulticastGroup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LeaveMulticastGroup
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
</UL>

<P><STRONG><a name="[396]"></a>ipIsUnspecifiedAddr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipIsUnspecifiedAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
</UL>

<P><STRONG><a name="[1e7]"></a>ipStringToAddr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ipStringToAddr &rArr; ipv6StringToAddr &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6StringToAddr
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNMPtrapTask
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[398]"></a>ipAddrToString</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ipAddrToString &rArr; ipv6AddrToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessEchoCommand
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpListenerTask
</UL>

<P><STRONG><a name="[296]"></a>tcpInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[399]"></a>tcpGetDynamicPort</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpGetDynamicPort
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
</UL>

<P><STRONG><a name="[39a]"></a>tcpConnect</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
</UL>

<P><STRONG><a name="[39f]"></a>tcpListen</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
</UL>

<P><STRONG><a name="[3a0]"></a>tcpAbort</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = tcpAbort &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[3a1]"></a>tcpGetState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcpGetState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetRxBufferSize
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTxBufferSize
</UL>

<P><STRONG><a name="[3a2]"></a>tcpAccept</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = tcpAccept &rArr; tcpAbort &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAccept
</UL>

<P><STRONG><a name="[3a3]"></a>tcpSend</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteTxBuffer
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>

<P><STRONG><a name="[3a7]"></a>tcpReceive</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[3aa]"></a>tcpShutdown</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = tcpShutdown &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
</UL>

<P><STRONG><a name="[3ab]"></a>tcpKillOldestConnection</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
</UL>

<P><STRONG><a name="[3ac]"></a>tcpStateTimeWait</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = tcpStateTimeWait &rArr; tcpCheckSequenceNumber &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3af]"></a>tcpStateClosing</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = tcpStateClosing &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3b1]"></a>tcpStateFinWait2</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = tcpStateFinWait2 &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3b3]"></a>tcpStateFinWait1</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = tcpStateFinWait1 &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3b4]"></a>tcpStateLastAck</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = tcpStateLastAck &rArr; tcpCheckSequenceNumber &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3b5]"></a>tcpStateCloseWait</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = tcpStateCloseWait &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3b6]"></a>tcpStateEstablished</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = tcpStateEstablished &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
</UL>

<P><STRONG><a name="[3b7]"></a>tcpStateSynReceived</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3b8]"></a>tcpStateSynSent</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tcpStateSynSent &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3bc]"></a>tcpStateListen</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = tcpStateListen &rArr; tcpSendResetSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3be]"></a>tcpStateClosed</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = tcpStateClosed &rArr; tcpSendResetSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[2f4]"></a>tcpProcessSegment</STRONG> (Thumb, 758 bytes, Stack size 56 bytes, tcp_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[3bf]"></a>tcpDumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[3c0]"></a>tcpReadTxBuffer</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tcpReadTxBuffer &rArr; netBufferConcat
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[3c1]"></a>tcpAddOption</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpAddOption
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[39c]"></a>tcpSendSegment</STRONG> (Thumb, 636 bytes, Stack size 112 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerRunning
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSequenceNumber
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
</UL>

<P><STRONG><a name="[3bd]"></a>tcpSendResetSegment</STRONG> (Thumb, 406 bytes, Stack size 112 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = tcpSendResetSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[3bb]"></a>tcpGetOption</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[3ad]"></a>tcpCheckSequenceNumber</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tcpCheckSequenceNumber &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
</UL>

<P><STRONG><a name="[3ae]"></a>tcpCheckSyn</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = tcpCheckSyn &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
</UL>

<P><STRONG><a name="[2ca]"></a>tcpUpdateEvents</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>

<P><STRONG><a name="[3c3]"></a>tcpRetransmitSegment</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
</UL>

<P><STRONG><a name="[3c4]"></a>tcpFastRetransmit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tcpFastRetransmit &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[3c5]"></a>tcpFastLossRecovery</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tcpFastLossRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[3c6]"></a>tcpFastRecovery</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tcpFastRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[3ba]"></a>tcpUpdateRetransmitQueue</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcpUpdateRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStop
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[3b9]"></a>tcpComputeRto</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpComputeRto &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[3c8]"></a>tcpUpdateSendWindow</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcpUpdateSendWindow &rArr; tcpTimerStart &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[3c9]"></a>tcpIsDuplicateAck</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcpIsDuplicateAck
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[3b0]"></a>tcpCheckAck</STRONG> (Thumb, 484 bytes, Stack size 48 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateAck
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
</UL>

<P><STRONG><a name="[3ca]"></a>tcpUpdateSackBlocks</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpUpdateSackBlocks &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[3cb]"></a>tcpWriteRxBuffer</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpWriteRxBuffer &rArr; netBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[3b2]"></a>tcpProcessSegmentData</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
</UL>

<P><STRONG><a name="[3cc]"></a>tcpFlushSynQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpFlushSynQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[3cd]"></a>tcpFlushRetransmitQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpFlushRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[39b]"></a>tcpDeleteControlBlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
</UL>

<P><STRONG><a name="[3a9]"></a>tcpUpdateReceiveWindow</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[3a6]"></a>tcpNagleAlgo</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[39d]"></a>tcpChangeState</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpListen
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
</UL>

<P><STRONG><a name="[39e]"></a>tcpWaitForEvents</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcpWaitForEvents &rArr; osWaitForEvent &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[3a4]"></a>tcpWriteTxBuffer</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcpWriteTxBuffer &rArr; netBufferWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[3a8]"></a>tcpReadRxBuffer</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tcp_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcpReadRxBuffer &rArr; netBufferRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[3ce]"></a>tcpTimerElapsed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcpTimerElapsed &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[3a5]"></a>tcpTimerStart</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tcp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcpTimerStart &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[3c7]"></a>tcpTimerStop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
</UL>

<P><STRONG><a name="[290]"></a>tcpTick</STRONG> (Thumb, 642 bytes, Stack size 32 bytes, tcp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = tcpTick &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerElapsed
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStop
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTimerStart
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[3c2]"></a>tcpTimerRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[659]"></a>tcpTimerGetInterval</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp_timer.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>udpInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = udpInit &rArr; osCreateMutex &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[3cf]"></a>udpGetDynamicPort</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udpGetDynamicPort
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[2cb]"></a>udpUpdateEvents</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = udpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
</UL>

<P><STRONG><a name="[3d0]"></a>udpInvokeRxCallback</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = udpInvokeRxCallback &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[3d1]"></a>udpDumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[2f5]"></a>udpProcessDatagram</STRONG> (Thumb, 612 bytes, Stack size 64 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = udpProcessDatagram &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDumpHeader
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
</UL>

<P><STRONG><a name="[1a8]"></a>udpSendDatagramEx</STRONG> (Thumb, 348 bytes, Stack size 104 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_send_ack_packet
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
</UL>

<P><STRONG><a name="[1a5]"></a>udpAllocBuffer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = udpAllocBuffer &rArr; ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_send_ack_packet
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
</UL>

<P><STRONG><a name="[3d2]"></a>udpSendDatagram</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = udpSendDatagram &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>

<P><STRONG><a name="[3d3]"></a>udpReceiveDatagram</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = udpReceiveDatagram &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[1af]"></a>udpAttachRxCallback</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = udpAttachRxCallback &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTask
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_process_write
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[3d4]"></a>udpDetachRxCallback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = udpDetachRxCallback &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[294]"></a>socketInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = socketInit &rArr; osCreateEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[1db]"></a>socketOpen</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = socketOpen &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[3d5]"></a>socketSetTimeout</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = socketSetTimeout &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpListenerTask
</UL>

<P><STRONG><a name="[3d6]"></a>socketSetTxBufferSize</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
</UL>

<P><STRONG><a name="[3d7]"></a>socketSetRxBufferSize</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
</UL>

<P><STRONG><a name="[410]"></a>socketBindToInterface</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, socket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
</UL>

<P><STRONG><a name="[1dc]"></a>socketBind</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = socketBind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
</UL>

<P><STRONG><a name="[3d8]"></a>socketConnect</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = socketConnect &rArr; tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsUnspecifiedAddr
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
</UL>

<P><STRONG><a name="[1dd]"></a>socketListen</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = socketListen &rArr; tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpListen
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
</UL>

<P><STRONG><a name="[1de]"></a>socketAccept</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = socketAccept &rArr; tcpAccept &rArr; tcpAbort &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpListenerTask
</UL>

<P><STRONG><a name="[3d9]"></a>socketSendTo</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentTask
</UL>

<P><STRONG><a name="[1ce]"></a>socketSend</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_telopt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_input
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIAC
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_menu
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpWrite
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSend
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIoWrite
</UL>

<P><STRONG><a name="[3da]"></a>socketReceiveEx</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveFrom
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
</UL>

<P><STRONG><a name="[1d6]"></a>socketReceive</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELNETS
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_input
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpRead
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReceive
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIoRead
</UL>

<P><STRONG><a name="[3db]"></a>socketReceiveFrom</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = socketReceiveFrom &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentTask
</UL>

<P><STRONG><a name="[3dc]"></a>socketGetLocalAddr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3dd]"></a>socketGetRemoteAddr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3de]"></a>socketShutdown</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = socketShutdown &rArr; tcpShutdown &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[1d0]"></a>socketClose</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = socketClose &rArr; tcpAbort &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TelnetTask
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELNETS
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_menu
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[3df]"></a>socketUnregisterEvents</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
</UL>

<P><STRONG><a name="[3e0]"></a>socketGetEvents</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
</UL>

<P><STRONG><a name="[3e1]"></a>socketRegisterEvents</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
</UL>

<P><STRONG><a name="[3e2]"></a>socketPoll</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetEvents
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketUnregisterEvents
</UL>

<P><STRONG><a name="[3e3]"></a>getHostByName</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
</UL>

<P><STRONG><a name="[297]"></a>dnsInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dns_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dnsInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[3e6]"></a>dnsDeleteEntry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dns_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dnsDeleteEntry &rArr; udpDetachRxCallback &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
</UL>

<P><STRONG><a name="[2c9]"></a>dnsFlushCache</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dns_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dnsFlushCache &rArr; dnsDeleteEntry &rArr; udpDetachRxCallback &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[3e7]"></a>dnsCreateEntry</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dns_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dnsCreateEntry &rArr; dnsDeleteEntry &rArr; udpDetachRxCallback &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[3e8]"></a>dnsFindEntry</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, dns_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dnsFindEntry &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[291]"></a>dnsTick</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, dns_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = dnsTick &rArr; dnsSendQuery &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[3e9]"></a>dnsSendQuery</STRONG> (Thumb, 366 bytes, Stack size 72 bytes, dns_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = dnsSendQuery &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[3ec]"></a>dnsProcessResponse</STRONG> (Thumb, 578 bytes, Stack size 56 bytes, dns_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = dnsProcessResponse &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns_client.o(.text)
</UL>
<P><STRONG><a name="[3e4]"></a>dnsResolve</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, dns_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = dnsResolve &rArr; dnsSendQuery &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[3eb]"></a>dnsEncodeName</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, dns_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
</UL>

<P><STRONG><a name="[3ed]"></a>dnsParseName</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, dns_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = dnsParseName &rArr;  dnsParseName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
</UL>

<P><STRONG><a name="[3ee]"></a>dnsCompareName</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, dns_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = dnsCompareName &rArr;  dnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
</UL>

<P><STRONG><a name="[3ef]"></a>dnsCompareEncodedName</STRONG> (Thumb, 294 bytes, Stack size 80 bytes, dns_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareEncodedName
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareEncodedName
</UL>

<P><STRONG><a name="[3ea]"></a>nbnsSendQuery</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, nbns_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = nbnsSendQuery &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetBroadcastAddr
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
</UL>

<P><STRONG><a name="[3e5]"></a>nbnsResolve</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, nbns_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = nbnsResolve &rArr; nbnsSendQuery &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[3f2]"></a>nbnsProcessResponse</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, nbns_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nbnsProcessResponse &rArr; nbnsCompareName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[3f5]"></a>nbnsSendResponse</STRONG> (Thumb, 250 bytes, Stack size 72 bytes, nbns_responder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = nbnsSendResponse &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
</UL>

<P><STRONG><a name="[3f6]"></a>nbnsProcessQuery</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, nbns_responder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[3f7]"></a>nbnsProcessMessage</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nbns_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = nbnsProcessMessage &rArr; nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nbns_common.o(.text)
</UL>
<P><STRONG><a name="[2a8]"></a>nbnsInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nbns_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nbnsInit &rArr; udpAttachRxCallback &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[3f0]"></a>nbnsEncodeName</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nbns_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nbnsEncodeName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[3f3]"></a>nbnsParseName</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, nbns_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nbnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[3f4]"></a>nbnsCompareName</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, nbns_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nbnsCompareName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[117]"></a>dhcpClientGetDefaultSettings</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcpClientGetDefaultSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f9]"></a>dhcpClientChangeState</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAckNak
</UL>

<P><STRONG><a name="[3fa]"></a>dhcpClientParseAckNak</STRONG> (Thumb, 622 bytes, Stack size 32 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = dhcpClientParseAckNak &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[3fc]"></a>dhcpClientParseOffer</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dhcpClientParseOffer &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[3fd]"></a>dhcpClientProcessMessage</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = dhcpClientProcessMessage &rArr; dhcpClientParseAckNak &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAckNak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp_client.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>dhcpClientInit</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = dhcpClientInit &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>dhcpClientStart</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dhcpClientStart &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3fe]"></a>dhcpClientStop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dhcp_client.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[3ff]"></a>dhcpClientGetState</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dhcp_client.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[400]"></a>dhcpClientComputeElapsedTime</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcpClientComputeElapsedTime &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
</UL>

<P><STRONG><a name="[401]"></a>dhcpClientSendRequest</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>

<P><STRONG><a name="[403]"></a>dhcpClientStateRebinding</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRebinding &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[404]"></a>dhcpClientStateRenewing</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRenewing &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[405]"></a>dhcpClientStateBound</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateBound &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[406]"></a>dhcpDumpConfig</STRONG> (Thumb, 438 bytes, Stack size 24 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = dhcpDumpConfig &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[407]"></a>dhcpClientSendDecline</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendDecline &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[408]"></a>dhcpClientStateProbing</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateProbing &rArr; dhcpClientSendDecline &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpDumpConfig
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[409]"></a>dhcpClientCheckTimeout</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dhcpClientCheckTimeout &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
</UL>

<P><STRONG><a name="[40a]"></a>dhcpClientStateRebooting</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRebooting &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[40b]"></a>dhcpClientStateInitReboot</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateInitReboot &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[40c]"></a>dhcpClientStateRequesting</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[40d]"></a>dhcpClientSendDiscover</STRONG> (Thumb, 432 bytes, Stack size 72 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendDiscover &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagramEx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
</UL>

<P><STRONG><a name="[40e]"></a>dhcpClientStateSelecting</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateSelecting &rArr; dhcpClientSendDiscover &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[40f]"></a>dhcpClientStateInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateInit &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[28c]"></a>dhcpClientTick</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = dhcpClientTick &rArr; dhcpClientStateRebinding &rArr; dhcpClientSendRequest &rArr; udpSendDatagramEx &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[2ef]"></a>dhcpClientLinkChangeEvent</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dhcp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dhcpClientLinkChangeEvent &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[402]"></a>dhcpAddOption</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, dhcp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcpAddOption
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
</UL>

<P><STRONG><a name="[3fb]"></a>dhcpGetOption</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dhcp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAckNak
</UL>

<P><STRONG><a name="[24c]"></a>mimeGetType</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mimeGetType &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiExecuteScript
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendRedirectResponse
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendResponse
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendErrorResponse
</UL>

<P><STRONG><a name="[11f]"></a>snmpAgentGetDefaultSettings</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, snmp_agent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>snmpAgentInit</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, snmp_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = snmpAgentInit &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketBind
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteMutex
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketBindToInterface
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[411]"></a>snmpAgentTask</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, snmp_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = snmpAgentTask &rArr; socketReceiveFrom &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveFrom
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessMessage
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmp_agent.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>snmpAgentStart</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, snmp_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = snmpAgentStart &rArr; osCreateTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>snmpAgentLoadMib</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, snmp_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = snmpAgentLoadMib &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[414]"></a>snmpAgentUnloadMib</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, snmp_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[415]"></a>snmpAgentSetEngineBoots</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, snmp_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[416]"></a>snmpAgentGetEngineBoots</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, snmp_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[123]"></a>snmpAgentSetEnterpriseOid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, snmp_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = snmpAgentSetEnterpriseOid &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>snmpAgentSetContextEngine</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, snmp_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = snmpAgentSetContextEngine &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[417]"></a>snmpAgentSetContextName</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, snmp_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[126]"></a>snmpAgentCreateUser</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, snmp_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = snmpAgentCreateUser &rArr; snmpGenerateKey &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGenerateKey
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateCommunity
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>snmpAgentCreateCommunity</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, snmp_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = snmpAgentCreateCommunity &rArr; snmpAgentCreateUser &rArr; snmpGenerateKey &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateUser
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[419]"></a>snmpAgentDeleteUser</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, snmp_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentDeleteCommunity
</UL>

<P><STRONG><a name="[41a]"></a>snmpAgentDeleteCommunity</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, snmp_agent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentDeleteUser
</UL>

<P><STRONG><a name="[1e8]"></a>snmpAgentSendTrap</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, snmp_agent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = snmpAgentSendTrap &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteScopedPdu
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteMessageHeader
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpRefreshEngineTime
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFindUser
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncryptData
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthOutgoingMessage
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNMPtrapTask
</UL>

<P><STRONG><a name="[422]"></a>snmpv3ProcessMessage</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, snmp_agent_dispatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = snmpv3ProcessMessage &rArr; snmpEncryptData &rArr; cfbEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessPdu
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseSecurityParameters
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseScopedPdu
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseGlobalData
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatReportPdu
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpDecryptData
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpCheckSecurityParameters
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpCheckEngineTime
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthIncomingMessage
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteScopedPdu
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteMessageHeader
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFindUser
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncryptData
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthOutgoingMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessMessage
</UL>

<P><STRONG><a name="[42c]"></a>snmpv2cProcessMessage</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, snmp_agent_dispatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = snmpv2cProcessMessage &rArr; snmpProcessPdu &rArr; snmpProcessGetBulkRequestPdu &rArr; snmpGetObjectValue &rArr; snmpEncodeUnsignedInt64 &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessPdu
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseCommunity
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteMessageHeader
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFindUser
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessMessage
</UL>

<P><STRONG><a name="[42e]"></a>snmpv1ProcessMessage</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, snmp_agent_dispatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = snmpv1ProcessMessage &rArr; snmpProcessPdu &rArr; snmpProcessGetBulkRequestPdu &rArr; snmpGetObjectValue &rArr; snmpEncodeUnsignedInt64 &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessPdu
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseCommunity
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteMessageHeader
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFindUser
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessMessage
</UL>

<P><STRONG><a name="[413]"></a>snmpProcessMessage</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, snmp_agent_dispatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = snmpProcessMessage &rArr; snmpv3ProcessMessage &rArr; snmpEncryptData &rArr; cfbEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseMessageHeader
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpInitMessage
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv1ProcessMessage
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv2cProcessMessage
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpRefreshEngineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentTask
</UL>

<P><STRONG><a name="[444]"></a>snmpLockMib</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = snmpLockMib
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetRequestPdu
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetBulkRequestPdu
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessSetRequestPdu
</UL>

<P><STRONG><a name="[445]"></a>snmpUnlockMib</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = snmpUnlockMib
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetRequestPdu
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetBulkRequestPdu
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessSetRequestPdu
</UL>

<P><STRONG><a name="[431]"></a>snmpInitResponse</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = snmpInitResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpComputeMessageOverhead
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpInitMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetRequestPdu
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetBulkRequestPdu
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessSetRequestPdu
</UL>

<P><STRONG><a name="[41b]"></a>snmpRefreshEngineTime</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = snmpRefreshEngineTime &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessMessage
</UL>

<P><STRONG><a name="[427]"></a>snmpCheckEngineTime</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = snmpCheckEngineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[41e]"></a>snmpFindUser</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = snmpFindUser &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv1ProcessMessage
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv2cProcessMessage
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[433]"></a>snmpParseVarBinding</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = snmpParseVarBinding &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetRequestPdu
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetBulkRequestPdu
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessSetRequestPdu
</UL>

<P><STRONG><a name="[436]"></a>snmpWriteVarBinding</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = snmpWriteVarBinding &rArr; asn1WriteTag
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteTag
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetRequestPdu
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetBulkRequestPdu
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatReportPdu
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
</UL>

<P><STRONG><a name="[438]"></a>snmpCopyVarBindingList</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = snmpCopyVarBindingList
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetRequestPdu
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetBulkRequestPdu
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessSetRequestPdu
</UL>

<P><STRONG><a name="[439]"></a>snmpFindMibObject</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = snmpFindMibObject &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetObjectValue
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpSetObjectValue
</UL>

<P><STRONG><a name="[43a]"></a>snmpSetObjectValue</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = snmpSetObjectValue &rArr; snmpFindMibObject &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpDecodeUnsignedInt64
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpDecodeUnsignedInt32
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpDecodeInt32
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFindMibObject
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessSetRequestPdu
</UL>

<P><STRONG><a name="[43e]"></a>snmpGetObjectValue</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = snmpGetObjectValue &rArr; snmpEncodeUnsignedInt64 &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncodeUnsignedInt64
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncodeUnsignedInt32
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncodeInt32
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFindMibObject
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetRequestPdu
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetBulkRequestPdu
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
</UL>

<P><STRONG><a name="[442]"></a>snmpGetNextObject</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = snmpGetNextObject &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetRequestPdu
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetBulkRequestPdu
</UL>

<P><STRONG><a name="[446]"></a>snmpTranslateStatusCode</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, snmp_agent_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = snmpTranslateStatusCode
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetRequestPdu
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetBulkRequestPdu
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessSetRequestPdu
</UL>

<P><STRONG><a name="[443]"></a>snmpProcessSetRequestPdu</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, snmp_agent_pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = snmpProcessSetRequestPdu &rArr; snmpSetObjectValue &rArr; snmpFindMibObject &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpTranslateStatusCode
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpSetObjectValue
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpCopyVarBindingList
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseVarBinding
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpInitResponse
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpUnlockMib
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpLockMib
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessPdu
</UL>

<P><STRONG><a name="[447]"></a>snmpProcessGetBulkRequestPdu</STRONG> (Thumb, 418 bytes, Stack size 64 bytes, snmp_agent_pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = snmpProcessGetBulkRequestPdu &rArr; snmpGetObjectValue &rArr; snmpEncodeUnsignedInt64 &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidCheck
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpTranslateStatusCode
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetNextObject
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetObjectValue
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpCopyVarBindingList
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteVarBinding
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseVarBinding
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpInitResponse
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpUnlockMib
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpLockMib
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessPdu
</UL>

<P><STRONG><a name="[449]"></a>snmpProcessGetRequestPdu</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, snmp_agent_pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = snmpProcessGetRequestPdu &rArr; snmpGetObjectValue &rArr; snmpEncodeUnsignedInt64 &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidCheck
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpTranslateStatusCode
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetNextObject
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetObjectValue
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpCopyVarBindingList
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteVarBinding
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseVarBinding
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpInitResponse
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpUnlockMib
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpLockMib
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessPdu
</UL>

<P><STRONG><a name="[42b]"></a>snmpProcessPdu</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, snmp_agent_pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = snmpProcessPdu &rArr; snmpProcessGetBulkRequestPdu &rArr; snmpGetObjectValue &rArr; snmpEncodeUnsignedInt64 &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWritePduHeader
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParsePduHeader
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetRequestPdu
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetBulkRequestPdu
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessSetRequestPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv1ProcessMessage
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv2cProcessMessage
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[41c]"></a>snmpFormatTrapPdu</STRONG> (Thumb, 818 bytes, Stack size 72 bytes, snmp_agent_pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = snmpFormatTrapPdu &rArr; snmpGetObjectValue &rArr; snmpEncodeUnsignedInt64 &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWritePduHeader
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncodeUnsignedInt32
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpComputeMessageOverhead
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetObjectValue
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteVarBinding
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpInitMessage
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
</UL>

<P><STRONG><a name="[429]"></a>snmpFormatReportPdu</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, snmp_agent_pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = snmpFormatReportPdu &rArr; snmpWritePduHeader &rArr; snmpEncodeUnsignedInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWritePduHeader
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncodeUnsignedInt32
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpComputeMessageOverhead
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteVarBinding
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpInitMessage
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[42f]"></a>snmpInitMessage</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, snmp_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpInitResponse
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatReportPdu
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessMessage
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
</UL>

<P><STRONG><a name="[432]"></a>snmpComputeMessageOverhead</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, snmp_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpInitResponse
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatReportPdu
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
</UL>

<P><STRONG><a name="[430]"></a>snmpParseMessageHeader</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = snmpParseMessageHeader &rArr; asn1ReadInt32 &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessMessage
</UL>

<P><STRONG><a name="[44d]"></a>snmpWriteGlobalData</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = snmpWriteGlobalData &rArr; asn1WriteTag
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteInt32
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteTag
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteMessageHeader
</UL>

<P><STRONG><a name="[44f]"></a>snmpWriteSecurityParameters</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = snmpWriteSecurityParameters &rArr; asn1WriteTag
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteInt32
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteTag
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteMessageHeader
</UL>

<P><STRONG><a name="[450]"></a>snmpWriteCommunity</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = snmpWriteCommunity &rArr; asn1WriteTag
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteTag
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteMessageHeader
</UL>

<P><STRONG><a name="[41d]"></a>snmpWriteMessageHeader</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = snmpWriteMessageHeader &rArr; snmpWriteSecurityParameters &rArr; asn1WriteTag
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteInt32
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteCommunity
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteSecurityParameters
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteGlobalData
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteTag
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv1ProcessMessage
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv2cProcessMessage
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[42d]"></a>snmpParseCommunity</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = snmpParseCommunity &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv1ProcessMessage
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv2cProcessMessage
</UL>

<P><STRONG><a name="[423]"></a>snmpParseGlobalData</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = snmpParseGlobalData &rArr; asn1ReadInt32 &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[424]"></a>snmpParseSecurityParameters</STRONG> (Thumb, 430 bytes, Stack size 48 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = snmpParseSecurityParameters &rArr; asn1ReadInt32 &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[42a]"></a>snmpParseScopedPdu</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = snmpParseScopedPdu &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[41f]"></a>snmpWriteScopedPdu</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = snmpWriteScopedPdu &rArr; asn1WriteTag
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteTag
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[44a]"></a>snmpParsePduHeader</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = snmpParsePduHeader &rArr; asn1ReadInt32 &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessPdu
</UL>

<P><STRONG><a name="[440]"></a>snmpEncodeUnsignedInt32</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = snmpEncodeUnsignedInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWritePduHeader
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetObjectValue
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatReportPdu
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
</UL>

<P><STRONG><a name="[44b]"></a>snmpWritePduHeader</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = snmpWritePduHeader &rArr; snmpEncodeUnsignedInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteInt32
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncodeUnsignedInt32
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteTag
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessPdu
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatReportPdu
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
</UL>

<P><STRONG><a name="[43f]"></a>snmpEncodeInt32</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = snmpEncodeInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetObjectValue
</UL>

<P><STRONG><a name="[441]"></a>snmpEncodeUnsignedInt64</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = snmpEncodeUnsignedInt64 &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap64
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetObjectValue
</UL>

<P><STRONG><a name="[43b]"></a>snmpDecodeInt32</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = snmpDecodeInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpSetObjectValue
</UL>

<P><STRONG><a name="[43c]"></a>snmpDecodeUnsignedInt32</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = snmpDecodeUnsignedInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpSetObjectValue
</UL>

<P><STRONG><a name="[43d]"></a>snmpDecodeUnsignedInt64</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, snmp_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = snmpDecodeUnsignedInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpSetObjectValue
</UL>

<P><STRONG><a name="[418]"></a>snmpGenerateKey</STRONG> (Thumb, 164 bytes, Stack size 376 bytes, snmp_usm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = snmpGenerateKey &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateUser
</UL>

<P><STRONG><a name="[425]"></a>snmpCheckSecurityParameters</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, snmp_usm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = snmpCheckSecurityParameters &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[421]"></a>snmpAuthOutgoingMessage</STRONG> (Thumb, 104 bytes, Stack size 552 bytes, snmp_usm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = snmpAuthOutgoingMessage &rArr; hmacUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[426]"></a>snmpAuthIncomingMessage</STRONG> (Thumb, 142 bytes, Stack size 568 bytes, snmp_usm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = snmpAuthIncomingMessage &rArr; hmacUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[420]"></a>snmpEncryptData</STRONG> (Thumb, 676 bytes, Stack size 568 bytes, snmp_usm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = snmpEncryptData &rArr; cfbEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desInit
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfbEncrypt
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcEncrypt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesInit
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteTag
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[428]"></a>snmpDecryptData</STRONG> (Thumb, 370 bytes, Stack size 560 bytes, snmp_usm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = snmpDecryptData &rArr; cfbDecrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desInit
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfbDecrypt
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcDecrypt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesInit
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpv3ProcessMessage
</UL>

<P><STRONG><a name="[45a]"></a>mibEncodeIndex</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, mib_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mibEncodeIndex &rArr; oidEncodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidEncodeSubIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIpNetToMediaEntry
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIfEntry
</UL>

<P><STRONG><a name="[45c]"></a>mibDecodeIndex</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, mib_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mibDecodeIndex &rArr; oidDecodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidDecodeSubIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetIpNetToMediaEntry
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetIfEntry
</UL>

<P><STRONG><a name="[45e]"></a>mibEncodeIpv4Addr</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, mib_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mibEncodeIpv4Addr &rArr; oidEncodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidEncodeSubIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextUdpEntry
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextTcpConnEntry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIpNetToMediaEntry
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIpAddrEntry
</UL>

<P><STRONG><a name="[45f]"></a>mibDecodeIpv4Addr</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, mib_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mibDecodeIpv4Addr &rArr; oidDecodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidDecodeSubIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetUdpEntry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetTcpConnEntry
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetIpNetToMediaEntry
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetIpAddrEntry
</UL>

<P><STRONG><a name="[460]"></a>mibEncodePort</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, mib_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mibEncodePort &rArr; oidEncodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidEncodeSubIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextUdpEntry
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextTcpConnEntry
</UL>

<P><STRONG><a name="[461]"></a>mibDecodePort</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mib_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mibDecodePort &rArr; oidDecodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidDecodeSubIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetUdpEntry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetTcpConnEntry
</UL>

<P><STRONG><a name="[8f]"></a>mib2Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mib2Init &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>mib2Lock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mib2Lock &rArr; osAcquireMutex &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>mib2Unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mib2Unlock &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>mib2GetSysUpTime</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mib2GetSysUpTime &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>mib2GetIfEntry</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mib2GetIfEntry &rArr; mibDecodeIndex &rArr; oidDecodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibDecodeIndex
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>mib2GetNextIfEntry</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mib2GetNextIfEntry &rArr; mibEncodeIndex &rArr; oidEncodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibEncodeIndex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>mib2GetIpAddrEntry</STRONG> (Thumb, 602 bytes, Stack size 48 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mib2GetIpAddrEntry &rArr; mibDecodeIpv4Addr &rArr; oidDecodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibDecodeIpv4Addr
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>mib2GetNextIpAddrEntry</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mib2GetNextIpAddrEntry &rArr; mibEncodeIpv4Addr &rArr; oidEncodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibEncodeIpv4Addr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>mib2SetIpNetToMediaEntry</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mib2SetIpNetToMediaEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>mib2GetIpNetToMediaEntry</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mib2GetIpNetToMediaEntry &rArr; mibDecodeIpv4Addr &rArr; oidDecodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibDecodeIpv4Addr
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibDecodeIndex
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>mib2GetNextIpNetToMediaEntry</STRONG> (Thumb, 308 bytes, Stack size 72 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mib2GetNextIpNetToMediaEntry &rArr; mibEncodeIpv4Addr &rArr; oidEncodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibEncodeIpv4Addr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibEncodeIndex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>mib2SetTcpConnEntry</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mib2SetTcpConnEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>mib2GetTcpConnEntry</STRONG> (Thumb, 602 bytes, Stack size 56 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mib2GetTcpConnEntry &rArr; mibDecodeIpv4Addr &rArr; oidDecodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibDecodePort
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibDecodeIpv4Addr
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>mib2GetNextTcpConnEntry</STRONG> (Thumb, 490 bytes, Stack size 72 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mib2GetNextTcpConnEntry &rArr; mibEncodeIpv4Addr &rArr; oidEncodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibEncodePort
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibEncodeIpv4Addr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>mib2GetUdpEntry</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mib2GetUdpEntry &rArr; mibDecodeIpv4Addr &rArr; oidDecodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibDecodePort
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibDecodeIpv4Addr
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>mib2GetNextUdpEntry</STRONG> (Thumb, 496 bytes, Stack size 64 bytes, mib2_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = mib2GetNextUdpEntry &rArr; mibEncodeIpv4Addr &rArr; oidEncodeSubIdentifier
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibEncodePort
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibEncodeIpv4Addr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mib2_module.o(.constdata)
</UL>
<P><STRONG><a name="[251]"></a>httpServerGetDefaultSettings</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = httpServerGetDefaultSettings &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpsServerInit
</UL>

<P><STRONG><a name="[252]"></a>httpServerInit</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = httpServerInit &rArr; socketOpen &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketBind
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateSemaphore
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketBindToInterface
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpsServerInit
</UL>

<P><STRONG><a name="[462]"></a>httpListenerTask</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = httpListenerTask &rArr; socketAccept &rArr; tcpAccept &rArr; tcpAbort &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAccept
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForSemaphore
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_server.o(.text)
</UL>
<P><STRONG><a name="[24f]"></a>httpCloseStream</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = httpCloseStream &rArr; httpSend &rArr; tlsWrite &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSend
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiExecuteScript
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendRedirectResponse
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendResponse
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendErrorResponse
</UL>

<P><STRONG><a name="[24e]"></a>httpWriteStream</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = httpWriteStream &rArr; httpSend &rArr; tlsWrite &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessCommand
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessEchoCommand
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiExecuteScript
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendRedirectResponse
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendResponse
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendErrorResponse
</UL>

<P><STRONG><a name="[24d]"></a>httpWriteHeader</STRONG> (Thumb, 1006 bytes, Stack size 32 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = httpWriteHeader &rArr; httpSend &rArr; tlsWrite &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiExecuteScript
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendRedirectResponse
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendResponse
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendErrorResponse
</UL>

<P><STRONG><a name="[464]"></a>httpSendErrorResponse</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = httpSendErrorResponse &rArr; httpWriteStream &rArr; httpSend &rArr; tlsWrite &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mimeGetType
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteStream
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteHeader
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCloseStream
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[465]"></a>httpSendResponse</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = httpSendResponse &rArr; httpWriteStream &rArr; httpSend &rArr; tlsWrite &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resGetData
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mimeGetType
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteStream
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteHeader
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCloseStream
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpGetAbsolutePath
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[467]"></a>httpConnectionTask</STRONG> (Thumb, 678 bytes, Stack size 0 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = httpConnectionTask &rArr; ssiExecuteScript &rArr; ssiProcessCommand &rArr; ssiProcessIncludeCommand &rArr;  ssiExecuteScript (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseSemaphore
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mimeGetType
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsShutdown
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetSocket
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetConnectionEnd
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsConnect
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiExecuteScript
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCompExtension
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendResponse
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendErrorResponse
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> http_server.o(.text)
</UL>
<P><STRONG><a name="[253]"></a>httpServerStart</STRONG> (Thumb, 550 bytes, Stack size 16 bytes, http_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = httpServerStart &rArr; osCreateTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpsServerInit
</UL>

<P><STRONG><a name="[471]"></a>httpReadStream</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, http_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReceive
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadChunkSize
</UL>

<P><STRONG><a name="[474]"></a>httpSendRedirectResponse</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, http_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mimeGetType
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteStream
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteHeader
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCloseStream
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[475]"></a>httpCheckPassword</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, http_server_auth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[476]"></a>httpParseAuthField</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, http_server_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = httpParseAuthField &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Decode
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
</UL>

<P><STRONG><a name="[65a]"></a>httpGenerateNonce</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, http_server_auth.o(.text), UNUSED)

<P><STRONG><a name="[65b]"></a>httpVerifyNonce</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, http_server_auth.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>httpParseContentTypeField</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, http_server_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
</UL>

<P><STRONG><a name="[473]"></a>httpReceive</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, http_server_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = httpReceive &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeaderField
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadChunkSize
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadStream
</UL>

<P><STRONG><a name="[47a]"></a>httpReadHeaderField</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, http_server_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = httpReadHeaderField &rArr; httpReceive &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReceive
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
</UL>

<P><STRONG><a name="[47b]"></a>httpDecodePercentEncodedString</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, http_server_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = httpDecodePercentEncodedString &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
</UL>

<P><STRONG><a name="[46c]"></a>httpReadHeader</STRONG> (Thumb, 646 bytes, Stack size 48 bytes, http_server_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = httpReadHeader &rArr; httpReadHeaderField &rArr; httpReceive &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathCanonicalize
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpDecodePercentEncodedString
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeaderField
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpParseContentTypeField
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpParseAuthField
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReceive
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[472]"></a>httpReadChunkSize</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, http_server_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strRemoveTrailingSpace
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReceive
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadStream
</UL>

<P><STRONG><a name="[463]"></a>httpSend</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, http_server_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = httpSend &rArr; tlsWrite &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteStream
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteHeader
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCloseStream
</UL>

<P><STRONG><a name="[466]"></a>httpGetAbsolutePath</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, http_server_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = httpGetAbsolutePath &rArr; pathCombine &rArr; pathAddSlash &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathCombine
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathCanonicalize
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessEchoCommand
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiExecuteScript
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendResponse
</UL>

<P><STRONG><a name="[46d]"></a>httpCompExtension</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, http_server_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = httpCompExtension &rArr; strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[65c]"></a>httpConvertArrayToHexString</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, http_server_misc.o(.text), UNUSED)

<P><STRONG><a name="[47f]"></a>ssiProcessExecCommand</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, ssi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ssiProcessExecCommand &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessCommand
</UL>

<P><STRONG><a name="[480]"></a>ssiProcessEchoCommand</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, ssi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = ssiProcessEchoCommand &rArr; httpWriteStream &rArr; httpSend &rArr; tlsWrite &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteStream
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpGetAbsolutePath
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessCommand
</UL>

<P><STRONG><a name="[481]"></a>ssiProcessIncludeCommand</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, ssi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ssiProcessIncludeCommand &rArr;  ssiExecuteScript (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strDuplicate
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resGetData
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteStream
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiExecuteScript
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpGetAbsolutePath
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCompExtension
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessCommand
</UL>

<P><STRONG><a name="[483]"></a>ssiProcessCommand</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, ssi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = ssiProcessCommand &rArr; ssiProcessIncludeCommand &rArr;  ssiExecuteScript (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteStream
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessEchoCommand
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessExecCommand
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiExecuteScript
</UL>

<P><STRONG><a name="[484]"></a>ssiSearchTag</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, ssi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ssiSearchTag
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiExecuteScript
</UL>

<P><STRONG><a name="[46e]"></a>ssiExecuteScript</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, ssi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = ssiExecuteScript &rArr; ssiProcessCommand &rArr; ssiProcessIncludeCommand &rArr;  ssiExecuteScript (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resGetData
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mimeGetType
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteStream
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteHeader
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCloseStream
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiSearchTag
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessCommand
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpGetAbsolutePath
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[485]"></a>smtpRead</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, smtp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = smtpRead &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
</UL>

<P><STRONG><a name="[486]"></a>smtpWrite</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, smtp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = smtpWrite &rArr; tlsWrite &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendData
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
</UL>

<P><STRONG><a name="[487]"></a>smtpSendCommand</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, smtp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = smtpSendCommand &rArr; smtpRead &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpWrite
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpRead
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendAuthLogin
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendAuthPlain
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendData
</UL>

<P><STRONG><a name="[488]"></a>smtpSendData</STRONG> (Thumb, 662 bytes, Stack size 40 bytes, smtp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = smtpSendData &rArr; smtpSendCommand &rArr; smtpRead &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpWrite
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
</UL>

<P><STRONG><a name="[489]"></a>smtpSendAuthPlain</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, smtp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = smtpSendAuthPlain &rArr; smtpSendCommand &rArr; smtpRead &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Encode
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
</UL>

<P><STRONG><a name="[48b]"></a>smtpSendAuthLogin</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, smtp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = smtpSendAuthLogin &rArr; smtpSendCommand &rArr; smtpRead &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Encode
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
</UL>

<P><STRONG><a name="[48c]"></a>smtpEhloReplyCallback</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, smtp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = smtpEhloReplyCallback &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtp_client.o(.text)
</UL>
<P><STRONG><a name="[1cc]"></a>smtpSendMail</STRONG> (Thumb, 994 bytes, Stack size 48 bytes, smtp_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = smtpSendMail &rArr; smtpSendData &rArr; smtpSendCommand &rArr; smtpRead &rArr; tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetPrng
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketBindToInterface
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendAuthLogin
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendAuthPlain
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendData
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetSocket
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetConnectionEnd
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsConnect
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Mail
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpClientTest
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
</UL>

<P><STRONG><a name="[65d]"></a>smtpSendAuthCramMd5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smtp_client.o(.text), UNUSED)

<P><STRONG><a name="[468]"></a>tlsInit</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tlsInit &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPublicKey
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhInit
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaInitPublicKey
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[46a]"></a>tlsSetSocket</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[469]"></a>tlsSetConnectionEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[243]"></a>tlsSetPrng</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerTlsInitCallback
</UL>

<P><STRONG><a name="[492]"></a>tlsSetServerName</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[244]"></a>tlsSetCache</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tls.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerTlsInitCallback
</UL>

<P><STRONG><a name="[245]"></a>tlsSetClientAuthMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerTlsInitCallback
</UL>

<P><STRONG><a name="[65e]"></a>tlsSetCipherSuites</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tls.o(.text), UNUSED)

<P><STRONG><a name="[65f]"></a>tlsSetDhParameters</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tls.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>tlsSetTrustedCaList</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tls.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerTlsInitCallback
</UL>

<P><STRONG><a name="[246]"></a>tlsAddCertificate</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCertificateType
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadCertificate
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerTlsInitCallback
</UL>

<P><STRONG><a name="[46b]"></a>tlsConnect</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = tlsConnect &rArr; tlsClientHandshake &rArr; tlsSendCertificateVerify &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[47e]"></a>tlsWrite</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = tlsWrite &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessError
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpWrite
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSend
</UL>

<P><STRONG><a name="[479]"></a>tlsRead</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = tlsRead &rArr; tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadProtocolData
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessError
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpRead
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReceive
</UL>

<P><STRONG><a name="[46f]"></a>tlsShutdown</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = tlsShutdown &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[470]"></a>tlsFree</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = tlsFree &rArr; tlsShutdown &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePublicKey
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhFree
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreePublicKey
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsShutdown
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
</UL>

<P><STRONG><a name="[4a2]"></a>tlsSaveSession</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlsSaveSession &rArr; osGetSystemTime
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveToCache
</UL>

<P><STRONG><a name="[4a3]"></a>tlsRestoreSession</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlsRestoreSession &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
</UL>

<P><STRONG><a name="[4d6]"></a>tlsGetNumSupportedCipherSuites</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_cipher_suites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetCipherSuite
</UL>

<P><STRONG><a name="[4b4]"></a>tlsGetCipherSuiteName</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tls_cipher_suites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[4d4]"></a>tlsIsCipherSuiteSupported</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tls_cipher_suites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
</UL>

<P><STRONG><a name="[4d5]"></a>tlsIsEccCipherSuite</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, tls_cipher_suites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
</UL>

<P><STRONG><a name="[4a4]"></a>tlsParseServerHelloDone</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tls_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tlsParseServerHelloDone &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerMessage
</UL>

<P><STRONG><a name="[4a6]"></a>tlsParseCertificateRequest</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, tls_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = tlsParseCertificateRequest &rArr; tlsIsCertificateAcceptable &rArr; x509ParseCertificate &rArr; x509ParseTbsCertificate &rArr; x509ParseSubjectPublicKeyInfo &rArr; x509ParseAlgorithmIdentifier &rArr; x509ParseDsaParameters &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectSignHashAlgo
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerMessage
</UL>

<P><STRONG><a name="[4a9]"></a>tlsParseServerKeyExchange</STRONG> (Thumb, 862 bytes, Stack size 48 bytes, tls_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tlsParseServerKeyExchange &rArr; rsassaPkcs1v15Verify &rArr; rsavp1 &rArr; rsaep &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadEcPoint
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCurveInfo
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerMessage
</UL>

<P><STRONG><a name="[4b1]"></a>tlsParseServerHello</STRONG> (Thumb, 556 bytes, Stack size 48 bytes, tls_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = tlsParseServerHello &rArr; tlsGenerateKeys &rArr; tlsPrf2 &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitHandshakeHash
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetVersionName
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeys
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCipherSuiteName
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetVersion
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetCompressionMethod
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetCipherSuite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerMessage
</UL>

<P><STRONG><a name="[4ba]"></a>tlsParseServerMessage</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, tls_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = tlsParseServerMessage &rArr; tlsReadProtocolData &rArr; tlsReadRecord &rArr; tlsIoRead &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHelloDone
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadProtocolData
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
</UL>

<P><STRONG><a name="[4be]"></a>tlsSendCertificateVerify</STRONG> (Thumb, 1102 bytes, Stack size 152 bytes, tls_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = tlsSendCertificateVerify &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateDsaSignature
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeHandshakeHash
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPrivateKey
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePrivateKey
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcPrivateKey
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDsaPrivateKey
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaInitPrivateKey
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreePrivateKey
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
</UL>

<P><STRONG><a name="[4ce]"></a>tlsSendClientKeyExchange</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, tls_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = tlsSendClientKeyExchange &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeys
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteEcPoint
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
</UL>

<P><STRONG><a name="[4d3]"></a>tlsSendClientHello</STRONG> (Thumb, 1090 bytes, Stack size 64 bytes, tls_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = tlsSendClientHello &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentUnixTime
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsEccCipherSuite
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCipherSuiteSupported
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetNumSupportedCipherSuites
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
</UL>

<P><STRONG><a name="[496]"></a>tlsClientHandshake</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, tls_client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = tlsClientHandshake &rArr; tlsSendCertificateVerify &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerMessage
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessError
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsConnect
</UL>

<P><STRONG><a name="[4da]"></a>tlsParseCertificateVerify</STRONG> (Thumb, 602 bytes, Stack size 48 bytes, tls_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = tlsParseCertificateVerify &rArr; tlsVerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeHandshakeHash
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyDsaSignature
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientMessage
</UL>

<P><STRONG><a name="[4dd]"></a>tlsParseClientKeyExchange</STRONG> (Thumb, 546 bytes, Stack size 136 bytes, tls_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = tlsParseClientKeyExchange &rArr; rsaesPkcs1v15Decrypt &rArr; rsadp &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadEcPoint
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeys
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPrivateKey
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePrivateKey
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Decrypt
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientMessage
</UL>

<P><STRONG><a name="[4df]"></a>tlsParseClientHello</STRONG> (Thumb, 1154 bytes, Stack size 88 bytes, tls_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tlsParseClientHello &rArr; tlsIsCertificateAcceptable &rArr; x509ParseCertificate &rArr; x509ParseTbsCertificate &rArr; x509ParseSubjectPublicKeyInfo &rArr; x509ParseAlgorithmIdentifier &rArr; x509ParseDsaParameters &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectSignHashAlgo
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitHandshakeHash
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSession
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectNamedCurve
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetExtension
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFindCache
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetVersion
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetCompressionMethod
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetCipherSuite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientMessage
</UL>

<P><STRONG><a name="[4e3]"></a>tlsParseClientMessage</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, tls_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = tlsParseClientMessage &rArr; tlsReadProtocolData &rArr; tlsReadRecord &rArr; tlsIoRead &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadProtocolData
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
</UL>

<P><STRONG><a name="[4e4]"></a>tlsSendServerHelloDone</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tls_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = tlsSendServerHelloDone &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
</UL>

<P><STRONG><a name="[4e5]"></a>tlsSendCertificateRequest</STRONG> (Thumb, 648 bytes, Stack size 64 bytes, tls_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = tlsSendCertificateRequest &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadCertificate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
</UL>

<P><STRONG><a name="[4e6]"></a>tlsSendServerKeyExchange</STRONG> (Thumb, 850 bytes, Stack size 144 bytes, tls_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = tlsSendServerKeyExchange &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCurveInfo
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPrivateKey
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePrivateKey
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteEcPoint
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
</UL>

<P><STRONG><a name="[4e7]"></a>tlsSendServerHello</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, tls_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = tlsSendServerHello &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentUnixTime
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeys
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsEccCipherSuite
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
</UL>

<P><STRONG><a name="[497]"></a>tlsServerHandshake</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tls_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = tlsServerHandshake &rArr; tlsSendServerKeyExchange &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessError
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveToCache
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateRequest
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHelloDone
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientMessage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsConnect
</UL>

<P><STRONG><a name="[49c]"></a>tlsSendAlert</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, tls_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessError
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsShutdown
</UL>

<P><STRONG><a name="[4d7]"></a>tlsSendCertificate</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, tls_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = tlsSendCertificate &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadCertificate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
</UL>

<P><STRONG><a name="[4d8]"></a>tlsSendChangeCipherSpec</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tls_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = tlsSendChangeCipherSpec &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
</UL>

<P><STRONG><a name="[4d9]"></a>tlsSendFinished</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, tls_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = tlsSendFinished &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
</UL>

<P><STRONG><a name="[4bb]"></a>tlsParseCertificate</STRONG> (Thumb, 1158 bytes, Stack size 64 bytes, tls_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = tlsParseCertificate &rArr; x509ValidateCertificate &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePublicKey
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadCertificate
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreePublicKey
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ReadRsaPublicKey
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ReadDsaPublicKey
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecImport
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGetCurveInfo
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerMessage
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientMessage
</UL>

<P><STRONG><a name="[4bd]"></a>tlsParseChangeCipherSpec</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tls_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tlsParseChangeCipherSpec &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerMessage
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientMessage
</UL>

<P><STRONG><a name="[4bc]"></a>tlsParseFinished</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, tls_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tlsParseFinished &rArr; tlsComputeVerifyData &rArr; tlsPrf2 &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerMessage
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientMessage
</UL>

<P><STRONG><a name="[49b]"></a>tlsParseAlert</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, tls_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tlsParseAlert &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerMessage
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientMessage
</UL>

<P><STRONG><a name="[4f2]"></a>tlsIncSequenceNumber</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tls_record.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
</UL>

<P><STRONG><a name="[4f0]"></a>tlsWriteRecord</STRONG> (Thumb, 712 bytes, Stack size 112 bytes, tls_record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcEncrypt
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIoWrite
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslComputeMac
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmEncrypt
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmEncrypt
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIncSequenceNumber
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
</UL>

<P><STRONG><a name="[498]"></a>tlsWriteProtocolData</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tls_record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWrite
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateRequest
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHelloDone
</UL>

<P><STRONG><a name="[4f6]"></a>tlsReadRecord</STRONG> (Thumb, 814 bytes, Stack size 120 bytes, tls_record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = tlsReadRecord &rArr; tlsIoRead &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcDecrypt
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIoRead
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslComputeMac
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmDecrypt
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmDecrypt
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIncSequenceNumber
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadProtocolData
</UL>

<P><STRONG><a name="[49a]"></a>tlsReadProtocolData</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, tls_record.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = tlsReadProtocolData &rArr; tlsReadRecord &rArr; tlsIoRead &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerMessage
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientMessage
</UL>

<P><STRONG><a name="[4f5]"></a>tlsIoWrite</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tls_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
</UL>

<P><STRONG><a name="[4f7]"></a>tlsIoRead</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, tls_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = tlsIoRead &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
</UL>

<P><STRONG><a name="[499]"></a>tlsProcessError</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsIoWrite &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv6SendDatagram &rArr; ipv6FragmentDatagram &rArr; ipv6SendPacket &rArr; ndpResolve &rArr; ndpCreateNeighborCacheEntry &rArr; ndpFlushQueuedPackets &rArr; icmpv6SendErrorMessage &rArr;  ipv6SendDatagram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWrite
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
</UL>

<P><STRONG><a name="[4b5]"></a>tlsSetVersion</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tlsSetVersion &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
</UL>

<P><STRONG><a name="[4b6]"></a>tlsSetCipherSuite</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tlsSetCipherSuite &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetNumSupportedCipherSuites
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
</UL>

<P><STRONG><a name="[4b7]"></a>tlsSetCompressionMethod</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tls_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
</UL>

<P><STRONG><a name="[4af]"></a>tlsGetHashAlgo</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tls_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectSignHashAlgo
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>

<P><STRONG><a name="[4a8]"></a>tlsSelectSignHashAlgo</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlsSelectSignHashAlgo
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
</UL>

<P><STRONG><a name="[4aa]"></a>tlsGetCurveInfo</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tls_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectNamedCurve
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
</UL>

<P><STRONG><a name="[4e2]"></a>tlsSelectNamedCurve</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlsSelectNamedCurve
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCurveInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
</UL>

<P><STRONG><a name="[4a5]"></a>tlsUpdateHandshakeHash</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tlsUpdateHandshakeHash &rArr; sha1Update &rArr; sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitHandshakeHash
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHelloDone
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>

<P><STRONG><a name="[4b8]"></a>tlsInitHandshakeHash</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tlsInitHandshakeHash &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Init
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
</UL>

<P><STRONG><a name="[4c0]"></a>tlsFinalizeHandshakeHash</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tlsFinalizeHandshakeHash &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>

<P><STRONG><a name="[4fa]"></a>tlsPrf2</STRONG> (Thumb, 216 bytes, Stack size 104 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tlsPrf2 &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeys
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
</UL>

<P><STRONG><a name="[4fb]"></a>tlsPrf</STRONG> (Thumb, 390 bytes, Stack size 88 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tlsPrf &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeys
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
</UL>

<P><STRONG><a name="[4ea]"></a>tlsComputeVerifyData</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tlsComputeVerifyData &rArr; tlsPrf2 &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeHandshakeHash
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf2
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
</UL>

<P><STRONG><a name="[4fc]"></a>tlsWriteMpi</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tls_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
</UL>

<P><STRONG><a name="[4ff]"></a>tlsReadMpi</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, tls_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
</UL>

<P><STRONG><a name="[4d1]"></a>tlsWriteEcPoint</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tlsWriteEcPoint &rArr; ecExport &rArr; mpiWriteRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecExport
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
</UL>

<P><STRONG><a name="[4ac]"></a>tlsReadEcPoint</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tlsReadEcPoint &rArr; ecImport &rArr; mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecImport
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
</UL>

<P><STRONG><a name="[4c2]"></a>tlsGenerateRsaSignature</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tlsGenerateRsaSignature &rArr; rsasp1 &rArr; rsadp &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsasp1
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
</UL>

<P><STRONG><a name="[4ae]"></a>tlsVerifyRsaSignature</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tlsVerifyRsaSignature &rArr; rsavp1 &rArr; rsaep &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsavp1
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>

<P><STRONG><a name="[4c6]"></a>tlsGenerateDsaSignature</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tlsGenerateDsaSignature &rArr; dsaGenerateSignature &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaWriteSignature
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaInitSignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreeSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
</UL>

<P><STRONG><a name="[4db]"></a>tlsVerifyDsaSignature</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tlsVerifyDsaSignature &rArr; dsaVerifySignature &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaReadSignature
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaInitSignature
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreeSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>

<P><STRONG><a name="[4cb]"></a>tlsGenerateEcdsaSignature</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tlsGenerateEcdsaSignature &rArr; ecdsaGenerateSignature &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaWriteSignature
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaInitSignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaFreeSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
</UL>

<P><STRONG><a name="[4dc]"></a>tlsVerifyEcdsaSignature</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = tlsVerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaInitSignature
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaFreeSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>

<P><STRONG><a name="[4b9]"></a>tlsGenerateKeys</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tlsGenerateKeys &rArr; tlsPrf2 &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslExpandKey
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf2
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
</UL>

<P><STRONG><a name="[4a7]"></a>tlsIsCertificateAcceptable</STRONG> (Thumb, 432 bytes, Stack size 80 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tlsIsCertificateAcceptable &rArr; x509ParseCertificate &rArr; x509ParseTbsCertificate &rArr; x509ParseSubjectPublicKeyInfo &rArr; x509ParseAlgorithmIdentifier &rArr; x509ParseDsaParameters &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadCertificate
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
</UL>

<P><STRONG><a name="[511]"></a>tlsGetNamedCurve</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tls_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCertificateType
</UL>

<P><STRONG><a name="[495]"></a>tlsGetCertificateType</STRONG> (Thumb, 564 bytes, Stack size 24 bytes, tls_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetNamedCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAddCertificate
</UL>

<P><STRONG><a name="[4e0]"></a>tlsGetExtension</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tls_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlsGetExtension
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
</UL>

<P><STRONG><a name="[4b2]"></a>tlsGetVersionName</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tls_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[512]"></a>tlsInitCache</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tls_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[4e1]"></a>tlsFindCache</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, tls_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tlsFindCache &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
</UL>

<P><STRONG><a name="[4e8]"></a>tlsSaveToCache</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, tls_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tlsSaveToCache &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSession
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
</UL>

<P><STRONG><a name="[4e9]"></a>tlsRemoveFromCache</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tls_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tlsRemoveFromCache &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
</UL>

<P><STRONG><a name="[513]"></a>tlsFreeCache</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tls_cache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteMutex
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[510]"></a>sslExpandKey</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, ssl_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sslExpandKey &rArr; sha1Final &rArr; sha1Update &rArr; sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeys
</UL>

<P><STRONG><a name="[4f1]"></a>sslComputeMac</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ssl_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sslComputeMac
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
</UL>

<P><STRONG><a name="[48a]"></a>base64Encode</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, base64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = base64Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendAuthLogin
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendAuthPlain
</UL>

<P><STRONG><a name="[478]"></a>base64Decode</STRONG> (Thumb, 202 bytes, Stack size 28 bytes, base64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = base64Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcPrivateKey
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDsaPrivateKey
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadCertificate
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpParseAuthField
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDhParameters
</UL>

<P><STRONG><a name="[514]"></a>md5ProcessBlock</STRONG> (Thumb, 2300 bytes, Stack size 20 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = md5ProcessBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
</UL>

<P><STRONG><a name="[94]"></a>md5Update</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = md5Update &rArr; md5ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5ProcessBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Compute
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslExpandKey
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>md5Final</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = md5Final &rArr; md5Update &rArr; md5ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5ProcessBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Compute
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslExpandKey
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>md5Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitHandshakeHash
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Compute
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslExpandKey
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>md5Compute</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = md5Compute &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[515]"></a>sha1ProcessBlock</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
</UL>

<P><STRONG><a name="[98]"></a>sha1Update</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sha1Update &rArr; sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1ProcessBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Compute
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslExpandKey
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateHandshakeHash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha1.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>sha1Final</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sha1Final &rArr; sha1Update &rArr; sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1ProcessBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Compute
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslExpandKey
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha1.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>sha1Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sha1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitHandshakeHash
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Compute
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslExpandKey
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha1.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>sha1Compute</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sha1Compute &rArr; sha1Final &rArr; sha1Update &rArr; sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha1.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>sha224Final</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sha224.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sha224Final &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224Compute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha224.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>sha224Update</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sha224.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sha224Update &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224Compute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha224.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>sha224Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sha224.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224Compute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha224.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>sha224Compute</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sha224.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sha224Compute &rArr; sha224Final &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224Update
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha224.o(.constdata)
</UL>
<P><STRONG><a name="[516]"></a>sha256ProcessBlock</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
</UL>

<P><STRONG><a name="[a0]"></a>sha256Update</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Compute
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224Update
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowAddEntropy
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSlowReseed
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha256.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>sha256Final</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Compute
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224Final
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSlowReseed
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha256.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>sha256Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Compute
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSlowReseed
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha256.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>sha256Compute</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sha256Compute &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha256.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>sha384Final</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sha384.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = sha384Final &rArr; sha512Final &rArr; sha512Update &rArr; sha512ProcessBlock &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Compute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha384.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>sha384Update</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sha384.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sha384Update &rArr; sha512Update &rArr; sha512ProcessBlock &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Update
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Compute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha384.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>sha384Init</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sha384.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Compute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha384.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>sha384Compute</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sha384.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sha384Compute &rArr; sha384Final &rArr; sha512Final &rArr; sha512Update &rArr; sha512ProcessBlock &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha384.o(.constdata)
</UL>
<P><STRONG><a name="[517]"></a>sha512ProcessBlock</STRONG> (Thumb, 886 bytes, Stack size 112 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sha512ProcessBlock &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap64
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
</UL>

<P><STRONG><a name="[a8]"></a>sha512Update</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = sha512Update &rArr; sha512ProcessBlock &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512ProcessBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Compute
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha512.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>sha512Final</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = sha512Final &rArr; sha512Update &rArr; sha512ProcessBlock &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap64
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512ProcessBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Update
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Compute
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha512.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>sha512Init</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sha512.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Compute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha512.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>sha512Compute</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sha512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sha512Compute &rArr; sha512Final &rArr; sha512Update &rArr; sha512ProcessBlock &rArr; _swap64
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha512.o(.constdata)
</UL>
<P><STRONG><a name="[454]"></a>hmacFinal</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hmacFinal
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthIncomingMessage
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthOutgoingMessage
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf2
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
</UL>

<P><STRONG><a name="[453]"></a>hmacUpdate</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hmacUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthIncomingMessage
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthOutgoingMessage
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf2
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
</UL>

<P><STRONG><a name="[452]"></a>hmacInit</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hmacInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthIncomingMessage
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthOutgoingMessage
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf2
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
</UL>

<P><STRONG><a name="[518]"></a>hmacCompute</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, hmac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
</UL>

<P><STRONG><a name="[aa]"></a>rc4Init</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, rc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rc4Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc4.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>rc4Cipher</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, rc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rc4Cipher
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc4.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>desInit</STRONG> (Thumb, 692 bytes, Stack size 20 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = desInit
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpDecryptData
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncryptData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> des.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>desEncryptBlock</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = desEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3DecryptBlock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3EncryptBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> des.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>desDecryptBlock</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = desDecryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3DecryptBlock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des3EncryptBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> des.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>des3Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = des3Init &rArr; desInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> des3.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>des3EncryptBlock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = des3EncryptBlock &rArr; desDecryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desDecryptBlock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desEncryptBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> des3.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>des3DecryptBlock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = des3DecryptBlock &rArr; desDecryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desDecryptBlock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desEncryptBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> des3.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>aesInit</STRONG> (Thumb, 564 bytes, Stack size 20 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aesInit
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpDecryptData
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncryptData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSlowReseed
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aes.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>aesEncryptBlock</STRONG> (Thumb, 1022 bytes, Stack size 40 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowGenerateBlock
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSlowReseed
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aes.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>aesDecryptBlock</STRONG> (Thumb, 1004 bytes, Stack size 40 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aesDecryptBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aes.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>camelliaInit</STRONG> (Thumb, 634 bytes, Stack size 40 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = camelliaInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camellia.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>camelliaEncryptBlock</STRONG> (Thumb, 656 bytes, Stack size 36 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = camelliaEncryptBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camellia.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>camelliaDecryptBlock</STRONG> (Thumb, 642 bytes, Stack size 36 bytes, camellia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = camelliaDecryptBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camellia.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>seedInit</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, seed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = seedInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> seed.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>seedEncryptBlock</STRONG> (Thumb, 492 bytes, Stack size 36 bytes, seed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = seedEncryptBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> seed.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>seedDecryptBlock</STRONG> (Thumb, 494 bytes, Stack size 36 bytes, seed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = seedDecryptBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> seed.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>ariaInit</STRONG> (Thumb, 2538 bytes, Stack size 112 bytes, aria.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ariaInit &rArr; EF
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap32
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EF
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OF
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aria.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>ariaEncryptBlock</STRONG> (Thumb, 866 bytes, Stack size 56 bytes, aria.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ariaEncryptBlock &rArr; EF
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EF
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OF
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aria.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>ariaDecryptBlock</STRONG> (Thumb, 890 bytes, Stack size 56 bytes, aria.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ariaDecryptBlock &rArr; EF
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EF
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OF
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aria.o(.constdata)
</UL>
<P><STRONG><a name="[456]"></a>cbcEncrypt</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, cipher_mode_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cbcEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncryptData
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
</UL>

<P><STRONG><a name="[458]"></a>cbcDecrypt</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, cipher_mode_cbc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cbcDecrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpDecryptData
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
</UL>

<P><STRONG><a name="[457]"></a>cfbEncrypt</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, cipher_mode_cfb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cfbEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncryptData
</UL>

<P><STRONG><a name="[459]"></a>cfbDecrypt</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, cipher_mode_cfb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cfbDecrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpDecryptData
</UL>

<P><STRONG><a name="[51b]"></a>ccmXorBlock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cipher_mode_ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ccmXorBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmEncrypt
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmDecrypt
</UL>

<P><STRONG><a name="[51c]"></a>ccmIncCounter</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cipher_mode_ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ccmIncCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmEncrypt
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmDecrypt
</UL>

<P><STRONG><a name="[4f3]"></a>ccmEncrypt</STRONG> (Thumb, 544 bytes, Stack size 104 bytes, cipher_mode_ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ccmEncrypt &rArr; ccmXorBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmIncCounter
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmXorBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
</UL>

<P><STRONG><a name="[4f8]"></a>ccmDecrypt</STRONG> (Thumb, 560 bytes, Stack size 120 bytes, cipher_mode_ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ccmDecrypt &rArr; ccmXorBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmIncCounter
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmXorBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
</UL>

<P><STRONG><a name="[51e]"></a>gcmXorBlock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cipher_mode_gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcmXorBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmEncrypt
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmDecrypt
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmMul
</UL>

<P><STRONG><a name="[51f]"></a>gcmShiftBlock</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cipher_mode_gcm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmMul
</UL>

<P><STRONG><a name="[51d]"></a>gcmMul</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, cipher_mode_gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gcmMul &rArr; gcmXorBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmShiftBlock
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmXorBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmEncrypt
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmDecrypt
</UL>

<P><STRONG><a name="[520]"></a>gcmIncCounter</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cipher_mode_gcm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmEncrypt
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmDecrypt
</UL>

<P><STRONG><a name="[4f4]"></a>gcmEncrypt</STRONG> (Thumb, 524 bytes, Stack size 120 bytes, cipher_mode_gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gcmEncrypt &rArr; gcmMul &rArr; gcmXorBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmIncCounter
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmMul
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmXorBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
</UL>

<P><STRONG><a name="[4f9]"></a>gcmDecrypt</STRONG> (Thumb, 540 bytes, Stack size 136 bytes, cipher_mode_gcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gcmDecrypt &rArr; gcmMul &rArr; gcmXorBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmIncCounter
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmMul
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmXorBlock
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
</UL>

<P><STRONG><a name="[48e]"></a>rsaInitPublicKey</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsaInitPublicKey
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[49e]"></a>rsaFreePublicKey</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rsaFreePublicKey &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[4bf]"></a>rsaInitPrivateKey</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsaInitPrivateKey
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
</UL>

<P><STRONG><a name="[4c3]"></a>rsaFreePrivateKey</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rsaFreePrivateKey &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
</UL>

<P><STRONG><a name="[521]"></a>rsaep</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = rsaep &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsavp1
</UL>

<P><STRONG><a name="[525]"></a>rsadp</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = rsadp &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsasp1
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Decrypt
</UL>

<P><STRONG><a name="[502]"></a>rsasp1</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = rsasp1 &rArr; rsadp &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
</UL>

<P><STRONG><a name="[503]"></a>rsavp1</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = rsavp1 &rArr; rsaep &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaep
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
</UL>

<P><STRONG><a name="[4cf]"></a>rsaesPkcs1v15Encrypt</STRONG> (Thumb, 254 bytes, Stack size 80 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = rsaesPkcs1v15Encrypt &rArr; rsaep &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaep
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
</UL>

<P><STRONG><a name="[4de]"></a>rsaesPkcs1v15Decrypt</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = rsaesPkcs1v15Decrypt &rArr; rsadp &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
</UL>

<P><STRONG><a name="[52a]"></a>emsaPkcs1v15Encode</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = emsaPkcs1v15Encode
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
</UL>

<P><STRONG><a name="[4cd]"></a>rsassaPkcs1v15Sign</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = rsassaPkcs1v15Sign &rArr; rsasp1 &rArr; rsadp &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsasp1
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPkcs1v15Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
</UL>

<P><STRONG><a name="[52b]"></a>emsaPkcs1v15Decode</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = emsaPkcs1v15Decode &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
</UL>

<P><STRONG><a name="[4b0]"></a>rsassaPkcs1v15Verify</STRONG> (Thumb, 240 bytes, Stack size 88 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rsassaPkcs1v15Verify &rArr; rsavp1 &rArr; rsaep &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsavp1
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPkcs1v15Decode
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>

<P><STRONG><a name="[48f]"></a>dsaInitPublicKey</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dsaInitPublicKey
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[49f]"></a>dsaFreePublicKey</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dsaFreePublicKey &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[4c4]"></a>dsaInitPrivateKey</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dsaInitPrivateKey
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
</UL>

<P><STRONG><a name="[4c7]"></a>dsaFreePrivateKey</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dsaFreePrivateKey &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDsaPrivateKey
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
</UL>

<P><STRONG><a name="[504]"></a>dsaInitSignature</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dsaInitSignature
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateDsaSignature
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyDsaSignature
</UL>

<P><STRONG><a name="[507]"></a>dsaFreeSignature</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dsaFreeSignature &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateDsaSignature
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaReadSignature
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyDsaSignature
</UL>

<P><STRONG><a name="[506]"></a>dsaWriteSignature</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dsaWriteSignature &rArr; mpiWriteRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateDsaSignature
</UL>

<P><STRONG><a name="[508]"></a>dsaReadSignature</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dsaReadSignature &rArr; mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreeSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyDsaSignature
</UL>

<P><STRONG><a name="[505]"></a>dsaGenerateSignature</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dsaGenerateSignature &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRand
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateDsaSignature
</UL>

<P><STRONG><a name="[509]"></a>dsaVerifySignature</STRONG> (Thumb, 408 bytes, Stack size 88 bytes, dsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = dsaVerifySignature &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyDsaSignature
</UL>

<P><STRONG><a name="[491]"></a>ecInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhInit
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
</UL>

<P><STRONG><a name="[490]"></a>ecInitDomainParameters</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ecInitDomainParameters &rArr; ecInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhInit
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[4a1]"></a>ecFree</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ecFree &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhFree
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
</UL>

<P><STRONG><a name="[4a0]"></a>ecFreeDomainParameters</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ecFreeDomainParameters &rArr; ecFree &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhFree
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[4ab]"></a>ecLoadDomainParameters</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ecLoadDomainParameters &rArr; mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
</UL>

<P><STRONG><a name="[532]"></a>ecCopy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ecCopy &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecProjectify
</UL>

<P><STRONG><a name="[4ee]"></a>ecImport</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ecImport &rArr; mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadEcPoint
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[501]"></a>ecExport</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecExport &rArr; mpiWriteRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteEcPoint
</UL>

<P><STRONG><a name="[534]"></a>ecProjectify</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ecProjectify &rArr; ecCopy &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
</UL>

<P><STRONG><a name="[535]"></a>ecMulMod</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecMulMod &rArr; mpiMod &rArr; mpiSubAbs &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
</UL>

<P><STRONG><a name="[536]"></a>ecSqrMod</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecSqrMod &rArr; mpiMod &rArr; mpiSubAbs &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
</UL>

<P><STRONG><a name="[537]"></a>ecAffinify</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ecAffinify &rArr; mpiInvMod &rArr; mpiDiv &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
</UL>

<P><STRONG><a name="[538]"></a>ecAddMod</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecAddMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
</UL>

<P><STRONG><a name="[539]"></a>ecIsPointAffine</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ecIsPointAffine &rArr; ecAddMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
</UL>

<P><STRONG><a name="[53a]"></a>ecSubMod</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
</UL>

<P><STRONG><a name="[53b]"></a>ecDouble</STRONG> (Thumb, 804 bytes, Stack size 80 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ecDouble &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSubMod
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
</UL>

<P><STRONG><a name="[53c]"></a>ecAdd</STRONG> (Thumb, 990 bytes, Stack size 112 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitValue
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSubMod
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
</UL>

<P><STRONG><a name="[53e]"></a>ecFullAdd</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
</UL>

<P><STRONG><a name="[53f]"></a>ecFullSub</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
</UL>

<P><STRONG><a name="[540]"></a>ecMult</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitValue
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecProjectify
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
</UL>

<P><STRONG><a name="[542]"></a>ecTwinMultF</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
</UL>

<P><STRONG><a name="[541]"></a>ecTwinMult</STRONG> (Thumb, 658 bytes, Stack size 144 bytes, ec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitValue
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMultF
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
</UL>

<P><STRONG><a name="[be]"></a>secp128r1Mod</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = secp128r1Mod &rArr; mpiAdd &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftLeft
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>secp128r2Mod</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = secp128r2Mod &rArr; mpiAdd &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftLeft
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>secp160k1Mod</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = secp160k1Mod &rArr; mpiMulInt &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulInt
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>secp160r1Mod</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = secp160r1Mod &rArr; mpiAdd &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftLeft
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>secp160r2Mod</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = secp160r2Mod &rArr; mpiMulInt &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulInt
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>secp192k1Mod</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = secp192k1Mod &rArr; mpiMulInt &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulInt
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>secp192r1Mod</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = secp192r1Mod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>secp224k1Mod</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = secp224k1Mod &rArr; mpiMulInt &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulInt
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>secp224r1Mod</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = secp224r1Mod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>secp256k1Mod</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = secp256k1Mod &rArr; mpiMulInt &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulInt
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>secp256r1Mod</STRONG> (Thumb, 620 bytes, Stack size 56 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = secp256r1Mod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>secp384r1Mod</STRONG> (Thumb, 618 bytes, Stack size 48 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = secp384r1Mod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>secp521r1Mod</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = secp521r1Mod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[4ed]"></a>ecGetCurveInfo</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, ec_curves.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecGetCurveInfo &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[48d]"></a>ecdhInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ecdhInit &rArr; ecInitDomainParameters &rArr; ecInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
</UL>

<P><STRONG><a name="[49d]"></a>ecdhFree</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ecdhFree &rArr; ecFreeDomainParameters &rArr; ecFree &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
</UL>

<P><STRONG><a name="[4d0]"></a>ecdhGenerateKeyPair</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ecdhGenerateKeyPair &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRand
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
</UL>

<P><STRONG><a name="[4ad]"></a>ecdhCheckPublicKey</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ecdhCheckPublicKey &rArr; ecIsPointAffine &rArr; ecAddMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
</UL>

<P><STRONG><a name="[4d2]"></a>ecdhComputeSharedSecret</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, ecdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ecdhComputeSharedSecret &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecProjectify
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
</UL>

<P><STRONG><a name="[50a]"></a>ecdsaInitSignature</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecdsaInitSignature
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
</UL>

<P><STRONG><a name="[50d]"></a>ecdsaFreeSignature</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ecdsaFreeSignature &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
</UL>

<P><STRONG><a name="[50c]"></a>ecdsaWriteSignature</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecdsaWriteSignature &rArr; mpiWriteRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[50e]"></a>ecdsaReadSignature</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ecdsaReadSignature &rArr; mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaFreeSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
</UL>

<P><STRONG><a name="[50b]"></a>ecdsaGenerateSignature</STRONG> (Thumb, 382 bytes, Stack size 112 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ecdsaGenerateSignature &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRand
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[50f]"></a>ecdsaVerifySignature</STRONG> (Thumb, 442 bytes, Stack size 176 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecProjectify
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
</UL>

<P><STRONG><a name="[4c8]"></a>mpiInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mpi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPrivateKey
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaInitPrivateKey
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPublicKey
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhInit
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaInitPublicKey
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaInitSignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaInitSignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Decrypt
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1Mod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224k1Mod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192r1Mod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192k1Mod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r2Mod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r1Mod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160k1Mod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r2Mod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r1Mod
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[4cc]"></a>mpiFree</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePrivateKey
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcPrivateKey
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreePrivateKey
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePublicKey
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhFree
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreePublicKey
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaFreeSignature
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreeSignature
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Decrypt
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1Mod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224k1Mod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192r1Mod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192k1Mod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r2Mod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r1Mod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160k1Mod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r2Mod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r1Mod
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDhParameters
</UL>

<P><STRONG><a name="[543]"></a>mpiGrow</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddAbs
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetBitValue
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftLeft
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1Mod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224k1Mod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192r1Mod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192k1Mod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r2Mod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r1Mod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160k1Mod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r2Mod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r1Mod
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRand
</UL>

<P><STRONG><a name="[547]"></a>mpiGetLength</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mpi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddAbs
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompAbs
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>

<P><STRONG><a name="[4fd]"></a>mpiGetByteLength</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mpi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaWriteSignature
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecExport
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaWriteSignature
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteMpi
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecImport
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Decrypt
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
</UL>

<P><STRONG><a name="[52c]"></a>mpiGetBitLength</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mpi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[546]"></a>mpiSetBitValue</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpiSetBitValue &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
</UL>

<P><STRONG><a name="[53d]"></a>mpiGetBitValue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpiGetBitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[523]"></a>mpiComp</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpiComp
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1Mod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224k1Mod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192r1Mod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192k1Mod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r2Mod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r1Mod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160k1Mod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r2Mod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r1Mod
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaep
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>

<P><STRONG><a name="[522]"></a>mpiCompInt</STRONG> (Thumb, 52 bytes, Stack size 28 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mpiCompInt &rArr; mpiComp
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSubMod
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaep
</UL>

<P><STRONG><a name="[548]"></a>mpiCompAbs</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpiCompAbs
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
</UL>

<P><STRONG><a name="[533]"></a>mpiCopy</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddAbs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192r1Mod
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecCopy
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[531]"></a>mpiSetValue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpiSetValue &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecProjectify
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[52d]"></a>mpiRand</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpiRand &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
</UL>

<P><STRONG><a name="[500]"></a>mpiReadRaw</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcPrivateKey
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDsaPrivateKey
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaReadSignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadMpi
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ReadRsaPublicKey
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ReadDsaPublicKey
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecImport
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Decrypt
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDhParameters
</UL>

<P><STRONG><a name="[4fe]"></a>mpiWriteRaw</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mpiWriteRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaWriteSignature
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecExport
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaWriteSignature
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteMpi
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Decrypt
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
</UL>

<P><STRONG><a name="[549]"></a>mpiSubAbs</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpiSubAbs &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompAbs
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
</UL>

<P><STRONG><a name="[54a]"></a>mpiAddAbs</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
</UL>

<P><STRONG><a name="[529]"></a>mpiAdd</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mpiAdd &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddAbs
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddMod
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddInt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1Mod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224k1Mod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192r1Mod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192k1Mod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r2Mod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r1Mod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160k1Mod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r2Mod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r1Mod
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSubMod
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
</UL>

<P><STRONG><a name="[54b]"></a>mpiAddInt</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mpi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
</UL>

<P><STRONG><a name="[526]"></a>mpiSub</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddAbs
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubMod
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192r1Mod
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSubMod
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubInt
</UL>

<P><STRONG><a name="[54c]"></a>mpiSubInt</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mpi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
</UL>

<P><STRONG><a name="[544]"></a>mpiShiftLeft</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpiShiftLeft &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r1Mod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r2Mod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp128r1Mod
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[52e]"></a>mpiShiftRight</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mpiShiftRight &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1Mod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224k1Mod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192k1Mod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r2Mod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160k1Mod
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
</UL>

<P><STRONG><a name="[528]"></a>mpiMul</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulAccCore
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulInt
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
</UL>

<P><STRONG><a name="[545]"></a>mpiMulInt</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mpiMulInt &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1Mod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224k1Mod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192k1Mod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r2Mod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160k1Mod
</UL>

<P><STRONG><a name="[54e]"></a>mpiDiv</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mpiDiv &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetBitValue
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftLeft
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDivInt
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
</UL>

<P><STRONG><a name="[54f]"></a>mpiDivInt</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, mpi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
</UL>

<P><STRONG><a name="[52f]"></a>mpiMod</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mpiMod &rArr; mpiSubAbs &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompAbs
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftLeft
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubMod
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddMod
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[550]"></a>mpiAddMod</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mpi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
</UL>

<P><STRONG><a name="[551]"></a>mpiSubMod</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mpi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
</UL>

<P><STRONG><a name="[527]"></a>mpiMulMod</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mpiMulMod &rArr; mpiMod &rArr; mpiSubAbs &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[530]"></a>mpiInvMod</STRONG> (Thumb, 338 bytes, Stack size 104 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mpiInvMod &rArr; mpiDiv &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
</UL>

<P><STRONG><a name="[552]"></a>mpiMontgomeryMul</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulAccCore
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryRed
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[553]"></a>mpiMontgomeryRed</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[524]"></a>mpiExpMod</STRONG> (Thumb, 846 bytes, Stack size 200 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryRed
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftLeft
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitValue
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaGenerateSignature
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaep
</UL>

<P><STRONG><a name="[554]"></a>mpiDump</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mpi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[54d]"></a>mpiMulAccCore</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, mpi_asm_keil_cortex_m3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
</UL>

<P><STRONG><a name="[434]"></a>asn1ReadTag</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asn1ReadTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcPrivateKey
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDsaPrivateKey
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParsePduHeader
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseVarBinding
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseSecurityParameters
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseScopedPdu
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseMessageHeader
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseGlobalData
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseCommunity
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpDecryptData
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaReadSignature
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseVersion
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSerialNumber
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignature
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseValidity
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTime
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseName
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaParameters
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseEcParameters
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseRsaPublicKey
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaPublicKey
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseIssuerUniqueId
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectUniqueId
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseBasicConstraints
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureAlgo
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureValue
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPkcs1v15Decode
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDhParameters
</UL>

<P><STRONG><a name="[435]"></a>asn1CheckTag</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcPrivateKey
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDsaPrivateKey
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParsePduHeader
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseVarBinding
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseSecurityParameters
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseScopedPdu
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseMessageHeader
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseGlobalData
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseCommunity
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpDecryptData
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaReadSignature
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseVersion
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSerialNumber
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignature
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseValidity
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTime
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseName
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaParameters
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseEcParameters
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseRsaPublicKey
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaPublicKey
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseIssuerUniqueId
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectUniqueId
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseBasicConstraints
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureAlgo
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureValue
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckOid
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDhParameters
</UL>

<P><STRONG><a name="[44c]"></a>asn1ReadInt32</STRONG> (Thumb, 118 bytes, Stack size 28 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = asn1ReadInt32 &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParsePduHeader
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseSecurityParameters
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseMessageHeader
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpParseGlobalData
</UL>

<P><STRONG><a name="[437]"></a>asn1WriteTag</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = asn1WriteTag
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteCommunity
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteSecurityParameters
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteGlobalData
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWritePduHeader
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteVarBinding
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteScopedPdu
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteMessageHeader
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncryptData
</UL>

<P><STRONG><a name="[44e]"></a>asn1WriteInt32</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = asn1WriteInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteSecurityParameters
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteGlobalData
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWritePduHeader
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteMessageHeader
</UL>

<P><STRONG><a name="[555]"></a>asn1CheckOid</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = asn1CheckOid &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureAlgo
</UL>

<P><STRONG><a name="[412]"></a>asn1DumpObject</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, asn1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcPrivateKey
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDsaPrivateKey
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadCertificate
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpDecryptData
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncryptData
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentTask
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaReadSignature
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDhParameters
</UL>

<P><STRONG><a name="[448]"></a>oidCheck</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oidCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetRequestPdu
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpProcessGetBulkRequestPdu
</UL>

<P><STRONG><a name="[18c]"></a>oidComp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oidComp
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibGetNextLedEntry
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentLoadMib
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCertificateType
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextUdpEntry
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextTcpConnEntry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIpNetToMediaEntry
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIpAddrEntry
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIfEntry
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetNextObject
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetNamedCurve
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGetCurveInfo
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckOid
</UL>

<P><STRONG><a name="[45b]"></a>oidEncodeSubIdentifier</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oidEncodeSubIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibEncodePort
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibEncodeIpv4Addr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibEncodeIndex
</UL>

<P><STRONG><a name="[45d]"></a>oidDecodeSubIdentifier</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oidDecodeSubIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibDecodePort
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibDecodeIpv4Addr
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibDecodeIndex
</UL>

<P><STRONG><a name="[122]"></a>oidFromString</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = oidFromString &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[556]"></a>oidToString</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[557]"></a>x509ParseSignatureValue</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseSignatureValue &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
</UL>

<P><STRONG><a name="[558]"></a>x509ParseSignatureAlgo</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = x509ParseSignatureAlgo &rArr; asn1CheckOid &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckOid
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
</UL>

<P><STRONG><a name="[559]"></a>x509ParseBasicConstraints</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseBasicConstraints &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
</UL>

<P><STRONG><a name="[55a]"></a>x509ParseExtensions</STRONG> (Thumb, 422 bytes, Stack size 88 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = x509ParseExtensions &rArr; x509ParseBasicConstraints &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseBasicConstraints
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[55b]"></a>x509ParseSubjectUniqueId</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseSubjectUniqueId &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[55c]"></a>x509ParseIssuerUniqueId</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseIssuerUniqueId &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[563]"></a>x509ParseEcPublicKey</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, x509.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
</UL>

<P><STRONG><a name="[55d]"></a>x509ParseDsaPublicKey</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseDsaPublicKey &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
</UL>

<P><STRONG><a name="[55e]"></a>x509ParseRsaPublicKey</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseRsaPublicKey &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
</UL>

<P><STRONG><a name="[55f]"></a>x509ParseEcParameters</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseEcParameters &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
</UL>

<P><STRONG><a name="[560]"></a>x509ParseDsaParameters</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseDsaParameters &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
</UL>

<P><STRONG><a name="[561]"></a>x509ParseAlgorithmIdentifier</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = x509ParseAlgorithmIdentifier &rArr; x509ParseDsaParameters &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaParameters
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseEcParameters
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckOid
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
</UL>

<P><STRONG><a name="[562]"></a>x509ParseSubjectPublicKeyInfo</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = x509ParseSubjectPublicKeyInfo &rArr; x509ParseAlgorithmIdentifier &rArr; x509ParseDsaParameters &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseRsaPublicKey
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaPublicKey
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseEcPublicKey
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[564]"></a>x509ParseName</STRONG> (Thumb, 564 bytes, Stack size 96 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = x509ParseName &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[565]"></a>x509ParseInt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = x509ParseInt &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTime
</UL>

<P><STRONG><a name="[566]"></a>x509ParseTime</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = x509ParseTime &rArr; x509ParseInt &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseInt
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseValidity
</UL>

<P><STRONG><a name="[567]"></a>x509ParseValidity</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = x509ParseValidity &rArr; x509ParseTime &rArr; x509ParseInt &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTime
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[568]"></a>x509ParseSignature</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseSignature &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[569]"></a>x509ParseSerialNumber</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseSerialNumber &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[56a]"></a>x509ParseVersion</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseVersion &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[56b]"></a>x509ParseTbsCertificate</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = x509ParseTbsCertificate &rArr; x509ParseSubjectPublicKeyInfo &rArr; x509ParseAlgorithmIdentifier &rArr; x509ParseDsaParameters &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseVersion
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSerialNumber
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignature
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseValidity
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseName
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseIssuerUniqueId
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectUniqueId
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
</UL>

<P><STRONG><a name="[494]"></a>x509ParseCertificate</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = x509ParseCertificate &rArr; x509ParseTbsCertificate &rArr; x509ParseSubjectPublicKeyInfo &rArr; x509ParseAlgorithmIdentifier &rArr; x509ParseDsaParameters &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureAlgo
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureValue
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAddCertificate
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateRequest
</UL>

<P><STRONG><a name="[4eb]"></a>x509ReadRsaPublicKey</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = x509ReadRsaPublicKey &rArr; mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[4ec]"></a>x509ReadDsaPublicKey</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = x509ReadDsaPublicKey &rArr; mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[4ef]"></a>x509ValidateCertificate</STRONG> (Thumb, 766 bytes, Stack size 208 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = x509ValidateCertificate &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertDateToUnixTime
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentUnixTime
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPublicKey
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePublicKey
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaInitPublicKey
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreePublicKey
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaInitSignature
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaFreeSignature
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaVerifySignature
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaReadSignature
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaInitSignature
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreeSignature
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ReadRsaPublicKey
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ReadDsaPublicKey
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecImport
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGetCurveInfo
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
</UL>

<P><STRONG><a name="[56e]"></a>pemSearchTag</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pemSearchTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcPrivateKey
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDsaPrivateKey
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadCertificate
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDhParameters
</UL>

<P><STRONG><a name="[56d]"></a>pemReadDhParameters</STRONG> (Thumb, 380 bytes, Stack size 72 bytes, pem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Decode
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemSearchTag
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[4c1]"></a>pemReadRsaPrivateKey</STRONG> (Thumb, 938 bytes, Stack size 72 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pemReadRsaPrivateKey &rArr; mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePrivateKey
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Decode
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemSearchTag
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
</UL>

<P><STRONG><a name="[4c5]"></a>pemReadDsaPrivateKey</STRONG> (Thumb, 600 bytes, Stack size 72 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pemReadDsaPrivateKey &rArr; mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsaFreePrivateKey
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Decode
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemSearchTag
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
</UL>

<P><STRONG><a name="[4c9]"></a>pemReadEcParameters</STRONG> (Thumb, 886 bytes, Stack size 72 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pemReadEcParameters &rArr; ecLoadDomainParameters &rArr; mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Decode
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGetCurveInfo
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckOid
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemSearchTag
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
</UL>

<P><STRONG><a name="[4ca]"></a>pemReadEcPrivateKey</STRONG> (Thumb, 858 bytes, Stack size 72 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pemReadEcPrivateKey &rArr; mpiReadRaw &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Decode
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemSearchTag
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
</UL>

<P><STRONG><a name="[493]"></a>pemReadCertificate</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pemReadCertificate &rArr; osAllocMem &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Decode
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemSearchTag
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAddCertificate
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateRequest
</UL>

<P><STRONG><a name="[cb]"></a>yarrowInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yarrowInit &rArr; osCreateMutex &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpsServerInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yarrow.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>yarrowRelease</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = yarrowRelease &rArr; osDeleteMutex &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteMutex
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yarrow.o(.constdata)
</UL>
<P><STRONG><a name="[56f]"></a>yarrowFastReseed</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yarrowFastReseed &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesEncryptBlock
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowAddEntropy
</UL>

<P><STRONG><a name="[cd]"></a>yarrowSeed</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = yarrowSeed &rArr; yarrowFastReseed &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpsServerInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yarrow.o(.constdata)
</UL>
<P><STRONG><a name="[570]"></a>yarrowSlowReseed</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yarrowSlowReseed &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesEncryptBlock
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowAddEntropy
</UL>

<P><STRONG><a name="[ce]"></a>yarrowAddEntropy</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = yarrowAddEntropy &rArr; yarrowSlowReseed &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSlowReseed
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yarrow.o(.constdata)
</UL>
<P><STRONG><a name="[571]"></a>yarrowGenerateBlock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = yarrowGenerateBlock &rArr; aesEncryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
</UL>

<P><STRONG><a name="[cf]"></a>yarrowRead</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = yarrowRead &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesInit
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowGenerateBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yarrow.o(.constdata)
</UL>
<P><STRONG><a name="[58e]"></a>pxPortInitialiseStack</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[573]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[572]"></a>xPortStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[59e]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[13a]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetChar
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetApplicationTaskTag
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[13b]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetChar
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAssertCalled
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetApplicationTaskTag
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetApplicationTaskTag
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[160]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[58c]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[58f]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[593]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[590]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[577]"></a>xQueueGenericReset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[25b]"></a>xQueueGenericCreate</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
</UL>

<P><STRONG><a name="[25c]"></a>xQueueGenericSend</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseSemaphore
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
</UL>

<P><STRONG><a name="[26a]"></a>xQueueCreateMutex</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
</UL>

<P><STRONG><a name="[266]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateSemaphore
</UL>

<P><STRONG><a name="[581]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[264]"></a>xQueueGiveFromISR</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>

<P><STRONG><a name="[25d]"></a>xQueueGenericReceive</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForSemaphore
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
</UL>

<P><STRONG><a name="[586]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[587]"></a>xQueuePeekFromISR</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[588]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[589]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[660]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>vQueueDelete</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteMutex
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteSemaphore
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
</UL>

<P><STRONG><a name="[661]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[662]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>xTaskGenericCreate</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[257]"></a>vTaskDelete</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteTask
</UL>

<P><STRONG><a name="[576]"></a>xTaskIncrementTick</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[163]"></a>xTaskResumeAll</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[161]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[594]"></a>vTaskDelayUntil</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>

<P><STRONG><a name="[258]"></a>vTaskDelay</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
</UL>

<P><STRONG><a name="[595]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[663]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[596]"></a>vTaskPrioritySet</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[f1]"></a>vTaskSwitchContext</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[597]"></a>vTaskSuspend</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[598]"></a>vTaskResume</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[59a]"></a>xTaskResumeFromISR</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[254]"></a>vTaskStartScheduler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osStartKernel
</UL>

<P><STRONG><a name="[59d]"></a>vTaskEndScheduler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[26c]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>

<P><STRONG><a name="[664]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[665]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[666]"></a>xTaskGetIdleTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[59f]"></a>vTaskSetApplicationTaskTag</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[5a0]"></a>xTaskGetApplicationTaskTag</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[667]"></a>xTaskCallApplicationTaskHook</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[580]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[165]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[578]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[162]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[57e]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[57f]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[57a]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[5a1]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>

<P><STRONG><a name="[668]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
</UL>

<P><STRONG><a name="[585]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[57d]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[166]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[584]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[5a3]"></a>ulTaskNotifyTake</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[5a4]"></a>xTaskNotifyWait</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[5a5]"></a>xTaskGenericNotify</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[5a6]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[5a7]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[5a8]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[15f]"></a>pvPortMalloc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, heap_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Mail
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_process_write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_send_ack_packet
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[16a]"></a>vPortFree</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, heap_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh_Gram
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Mail
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_send_ack_packet
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[fe]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time5_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time4_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
</UL>

<P><STRONG><a name="[137]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUartNVIC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time5_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time4_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
</UL>

<P><STRONG><a name="[669]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[66a]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[66b]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[66c]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[66d]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[66e]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[66f]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[670]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[671]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[672]"></a>FLASH_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[673]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[674]"></a>FLASH_InstructionCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[675]"></a>FLASH_DataCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[676]"></a>FLASH_InstructionCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[677]"></a>FLASH_DataCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>FLASH_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Init
</UL>

<P><STRONG><a name="[678]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[5ac]"></a>FLASH_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5ab]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramDoubleWord
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
</UL>

<P><STRONG><a name="[17c]"></a>FLASH_EraseSector</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>

<P><STRONG><a name="[5ad]"></a>FLASH_EraseAllSectors</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5ae]"></a>FLASH_ProgramDoubleWord</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[17e]"></a>FLASH_ProgramWord</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
</UL>

<P><STRONG><a name="[5af]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5b0]"></a>FLASH_ProgramByte</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[679]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[67a]"></a>FLASH_OB_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[5b1]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5b2]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5b3]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[67b]"></a>FLASH_OB_BORConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[5b4]"></a>FLASH_OB_Launch</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[67c]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[67d]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[67e]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[67f]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[680]"></a>FLASH_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[681]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>FLASH_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Init
</UL>

<P><STRONG><a name="[5b5]"></a>GPIO_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[fb]"></a>GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICinit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init_softset
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIOInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temhum_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInitGpio
</UL>

<P><STRONG><a name="[682]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[683]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Set_Menu
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperatuer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init_softset
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSDA
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_measure
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_read_byte
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_write_byte
</UL>

<P><STRONG><a name="[684]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[685]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[686]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_mw
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_led
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_alm
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beel
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_CS
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SDI
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SCK
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_RS
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_REST
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_LEDA
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_CS
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_eeprom
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_clk
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInitGpio
</UL>

<P><STRONG><a name="[12b]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_mw
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_led
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_alm
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beel
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_CS
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SDI
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SCK
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_RS
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_REST
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_LEDA
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_CS
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_eeprom
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_clk
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInitGpio
</UL>

<P><STRONG><a name="[687]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[688]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[689]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInitGpio
</UL>

<P><STRONG><a name="[174]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[175]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[176]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[156]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IwdgTask
</UL>

<P><STRONG><a name="[177]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[68a]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[68b]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[68c]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[5b7]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[5b6]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[68d]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[68e]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[68f]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[690]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[691]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[692]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[693]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[694]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[695]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[696]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[697]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[698]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[699]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[69a]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[69b]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[69c]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
</UL>

<P><STRONG><a name="[69d]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[69e]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[69f]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6a0]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICinit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init_softset
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIOInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temhum_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInit
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInitGpio
</UL>

<P><STRONG><a name="[10a]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a1]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time5_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time4_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
</UL>

<P><STRONG><a name="[135]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInitGpio
</UL>

<P><STRONG><a name="[2ba]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInit
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[5b9]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_DeInit
</UL>

<P><STRONG><a name="[6a2]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[5bb]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[6a3]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6a4]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6a5]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6a6]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6a7]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6a8]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6a9]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6aa]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6ab]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[5b8]"></a>RNG_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_rng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphResetCmd
</UL>

<P><STRONG><a name="[10b]"></a>RNG_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>RNG_GetRandomNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentRandCallback
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpsServerInit
</UL>

<P><STRONG><a name="[6ac]"></a>RNG_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>RNG_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentRandCallback
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpsServerInit
</UL>

<P><STRONG><a name="[6ad]"></a>RNG_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text), UNUSED)

<P><STRONG><a name="[6ae]"></a>RNG_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text), UNUSED)

<P><STRONG><a name="[6af]"></a>RNG_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text), UNUSED)

<P><STRONG><a name="[5ba]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[23a]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
</UL>

<P><STRONG><a name="[6b0]"></a>I2S_Init</STRONG> (Thumb, 350 bytes, Stack size 36 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6b1]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6b2]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_SetSpeed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
</UL>

<P><STRONG><a name="[6b3]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6b4]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6b5]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6b6]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6b7]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6b8]"></a>SPI_TIModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6b9]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6ba]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6bb]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6bc]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6bd]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6be]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6bf]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6c0]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6c1]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6c2]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6c3]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6c4]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[6c5]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[5bc]"></a>SYSCFG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[6c6]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[2b9]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInitGpio
</UL>

<P><STRONG><a name="[6c7]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[6c8]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time5_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time4_Init
</UL>

<P><STRONG><a name="[198]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time5_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time4_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
</UL>

<P><STRONG><a name="[6c9]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6ca]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6cb]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6cc]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6cd]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6ce]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6cf]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6d0]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6d1]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6d2]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6d3]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6d4]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time5_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time4_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
</UL>

<P><STRONG><a name="[6d5]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6d6]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6d7]"></a>TIM_OC3Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6d8]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6d9]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6da]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6db]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6dc]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6dd]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6de]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6df]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6e0]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6e1]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6e2]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6e3]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6e4]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6e5]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6e6]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6e7]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6e8]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6e9]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6ea]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6eb]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6ec]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6ed]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6ee]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6ef]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6f0]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6f1]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6f2]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6f3]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6f4]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6f5]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6f6]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6f7]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5c5]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[5c3]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[5c1]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[5bf]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[5bd]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[6f8]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5c6]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[6f9]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6fa]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6fb]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6fc]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6fd]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6fe]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[6ff]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[700]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[701]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time5_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time4_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3_Init
</UL>

<P><STRONG><a name="[702]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[703]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time5_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time4_Init
</UL>

<P><STRONG><a name="[19b]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[19c]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[704]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[705]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[706]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[707]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5c8]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[5c7]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[5c9]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[5cb]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[5ca]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[5cc]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[708]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[709]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[70a]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[70b]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[70c]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[70d]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5cd]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[131]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[70e]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[70f]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[710]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[711]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[712]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[713]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_One_Byte3
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_One_Byte6
</UL>

<P><STRONG><a name="[141]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>

<P><STRONG><a name="[714]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[715]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[716]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[717]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[718]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[719]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[71a]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[71b]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[71c]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[71d]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[71e]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[71f]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[720]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[144]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_One_Byte3
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_One_Byte6
</UL>

<P><STRONG><a name="[134]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardUart
</UL>

<P><STRONG><a name="[140]"></a>USART_GetITStatus</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIRQ
</UL>

<P><STRONG><a name="[721]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[722]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[723]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidFromString
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macStringToAddr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strRemoveTrailingSpace
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6StringToAddr
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseInt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[5a9]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[5aa]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[286]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathMatch
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetServerName
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[3f8]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>

<P><STRONG><a name="[10d]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNMPtrapTask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerStart
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720EventHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8720Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthInit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacDumpConfig
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStop
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendLeaveGroupMessage
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendReportMessage
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpDumpConfig
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStop
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHelloDone
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsServerHandshake
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsClientHandshake
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendData
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpListenerTask
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerKeyExchange
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateRequest
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHelloDone
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientKeyExchange
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetVersion
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetCipherSuite
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDump
</UL>

<P><STRONG><a name="[1c1]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicreaddata
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMTPTask
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Mail
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_telopt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_input
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIAC
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_menu
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatDate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteStream
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteHeader
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macAddrToString
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddrToString
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendAuthPlain
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendData
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessEchoCommand
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendRedirectResponse
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendErrorResponse
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidToString
</UL>

<P><STRONG><a name="[5d3]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[5d4]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[5d2]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d7]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[da]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[724]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[5d6]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1c7]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mytok
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
</UL>

<P><STRONG><a name="[47c]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpDecodePercentEncodedString
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadChunkSize
</UL>

<P><STRONG><a name="[5dc]"></a>_strtok_r</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtok_r.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[477]"></a>strtok_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, strtok_r.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpEhloReplyCallback
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpParseAuthField
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
</UL>

<P><STRONG><a name="[397]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessEchoCommand
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessExecCommand
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpParseAuthField
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
</UL>

<P><STRONG><a name="[2cd]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMulticastAddr
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMulticastAddr
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsUnspecifiedAddr
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpIsFirstHopRouter
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindNeighborCacheEntry
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborAdv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerReport
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldProcessListenerQuery
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsAnycastAddr
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAddrScope
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CompPrefix
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveAddr
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddAddr
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAddrState
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SearchFragQueue
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFindDestCacheEntry
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldStartListening
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldLinkChangeEvent
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6IsTentativeAddr
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6CheckDestAddr
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetDefaultRouter
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAnycastAddr
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAckNak
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFindMibObject
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpCheckSecurityParameters
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthIncomingMessage
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmDecrypt
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmDecrypt
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveToCache
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFindCache
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseName
</UL>

<P><STRONG><a name="[180]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateUser
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicresetdata
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendMail
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerGetDefaultSettings
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpsServerInit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendAuthPlain
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessEchoCommand
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessExecCommand
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpGetAbsolutePath
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetContextName
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidToString
</UL>

<P><STRONG><a name="[27b]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resSearchFile
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resGetData
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareEncodedName
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessCommand
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCompExtension
</UL>

<P><STRONG><a name="[248]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mimeGetType
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpEhloReplyCallback
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessEchoCommand
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessExecCommand
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpParseAuthField
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
</UL>

<P><STRONG><a name="[482]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
</UL>

<P><STRONG><a name="[181]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibGetLedEntry
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateUser
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_StrCenter
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSendTrap
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strDuplicate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTU
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_telopt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tel_input
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIAC
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_menu
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathCombine
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathAddSlash
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathFindFileName
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mimeGetType
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpWriteHeader
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeHandshakeHash
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetServerName
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpEhloReplyCallback
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendAuthLogin
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendAuthPlain
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendData
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendCommand
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessEchoCommand
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessExecCommand
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpParseAuthField
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCompExtension
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendRedirectResponse
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpSendErrorResponse
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatReportPdu
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGenerateKey
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFindUser
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetContextName
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf2
</UL>

<P><STRONG><a name="[249]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathCanonicalize
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6StringToAddr
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFindUser
</UL>

<P><STRONG><a name="[281]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathAddSlash
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtpSendAuthLogin
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibGetNextLedEntry
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibGetLedEntry
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetEnterpriseOid
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentSetContextEngine
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateUser
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strDuplicate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ProcessPacket
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4x7EthReceivePacket
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6JoinMulticastGroup
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectDefaultRouter
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNextHop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacParseRouterAdv
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateNeighborCache
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpUpdateDefaultRouterList
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborAdv
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRouterSol
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendNeighborSol
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerDone
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mldSendListenerReport
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRouterAdv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessRedirect
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpProcessNeighborSol
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6ProcessEchoRequest
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SelectSourceAddr
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemoveDefaultRouter
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddDefaultRouter
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6RemovePrefix
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6AddPrefix
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSelectNextHop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpResolve
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAddr
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushPrefixList
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDefaultRouterList
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6ComputeSolicitedNodeAddr
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpv6SendErrorMessage
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SendPacket
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetDnsServer
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetDnsServer
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetDefaultRouter
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetDefaultRouter
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetPrefix
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetPrefix
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetAnycastAddr
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6SetAnycastAddr
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6LeaveMulticastGroup
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetGlobalAddr
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6GetLinkLocalAddr
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeHandshakeHash
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadRsaPrivateKey
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcPrivateKey
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadEcParameters
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDsaPrivateKey
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadCertificate
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSession
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSession
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessIncludeCommand
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessEchoCommand
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiProcessExecCommand
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWrite
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextUdpEntry
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextTcpConnEntry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIpNetToMediaEntry
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIpAddrEntry
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetNextIfEntry
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetIfEntry
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfbEncrypt
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfbDecrypt
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcEncrypt
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcDecrypt
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetNextObject
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGetObjectValue
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpSetObjectValue
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpCopyVarBindingList
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthIncomingMessage
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthOutgoingMessage
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Final
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224Final
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslExpandKey
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf2
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmEncrypt
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmEncrypt
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmDecrypt
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Decrypt
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendServerHello
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateRequest
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseClientHello
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPkcs1v15Encode
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmMul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ariaDecryptBlock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ariaEncryptBlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ariaInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camelliaInit
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemReadDhParameters
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[5de]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[725]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathCanonicalize
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadProtocolData
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfbEncrypt
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfbDecrypt
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteTag
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
</UL>

<P><STRONG><a name="[5df]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[726]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNMPtrapTask
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketBind
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_wrq_recv_callback
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetRemoteAddr
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetLocalAddr
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSession
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSession
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpFormatTrapPdu
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmDecrypt
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmDecrypt
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1Mod
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224k1Mod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192r1Mod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192k1Mod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r2Mod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r1Mod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160k1Mod
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[727]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[728]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[729]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[455]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpEncryptData
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslExpandKey
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPkcs1v15Encode
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateUser
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicresetdata
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicreaddata
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modbus_data
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpAddOption
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpWriteSecurityParameters
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAuthIncomingMessage
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpGenerateKey
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentDeleteUser
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiWriteRaw
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmEncrypt
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmDecrypt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[5e2]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[5e1]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_8207
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_C
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_B
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_A
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_zero_register_dc
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IARMSOS_offset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code_dc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_C
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_B
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Check_A
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_set
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_8207
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_8207
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMTPTask
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Mail
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modbus_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_menu
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mytok
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpInit
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaacInit
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateNeighborCacheEntry
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpSendRedirect
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpFlushDestCache
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv6FlushDnsServerList
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndpCreateDestCacheEntry
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeys
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpConnectionTask
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeCache
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitCache
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiReadRaw
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFindCache
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1Mod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224k1Mod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp192k1Mod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r2Mod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160r1Mod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp160k1Mod
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRand
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ariaInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camelliaInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRelease
</UL>

<P><STRONG><a name="[72a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[72b]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5e3]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1bf]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicresetdata
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqorder
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pathCombine
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
</UL>

<P><STRONG><a name="[187]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibGetLedEntry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateMibSetLedEntry
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentCreateUser
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_menu
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;login
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServerUriNotFoundCallback
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeaderField
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpCheckPassword
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadHeader
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpReadChunkSize
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetUdpEntry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetTcpConnEntry
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetIpNetToMediaEntry
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetIpAddrEntry
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mib2GetIfEntry
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmpAgentDeleteUser
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[5ce]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[e4]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[5d9]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[72c]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[72d]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[72e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[72f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5cf]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[5e5]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e2]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[5e7]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[5e8]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[5e9]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[5d5]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[730]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[5f0]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5d1]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[6b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[5f3]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[dc]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[de]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[5d0]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[5db]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[5da]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[5dd]"></a>__strtok_internal</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, strtok_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtok_r
</UL>

<P><STRONG><a name="[731]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[732]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[5f8]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[5e0]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[733]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[5e4]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[5ef]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5f2]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[5f5]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[5eb]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5e6]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[5f7]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[5f6]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[ec]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5fa]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5f9]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5fc]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[5ec]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5fe]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[5fd]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[5ff]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[600]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[5ed]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5ee]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[601]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[5f1]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[20a]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
</UL>

<P><STRONG><a name="[605]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[602]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[603]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[604]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[5d7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[606]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[608]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[6a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[202]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[734]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[735]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[736]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[737]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[738]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[201]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[60a]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[612]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Read
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[60e]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Read
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
</UL>

<P><STRONG><a name="[60f]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[20c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
</UL>

<P><STRONG><a name="[610]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Read
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
</UL>

<P><STRONG><a name="[739]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1fd]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
</UL>

<P><STRONG><a name="[73a]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[203]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
</UL>

<P><STRONG><a name="[611]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[615]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8207Read
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[613]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[60d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[60c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
</UL>

<P><STRONG><a name="[614]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[607]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[616]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[609]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_C
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_B
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_A
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPF_dc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[618]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxB
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_correctPHxA
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMTPTask
</UL>

<P><STRONG><a name="[619]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[61a]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[e0]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[73b]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[73c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[d5]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f3]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f2]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f5]"></a>AppObjCreate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AppObjCreate &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>UartVarInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[12e]"></a>InitHardUart</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = InitHardUart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[136]"></a>ConfigUartNVIC</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConfigUartNVIC &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitUart
</UL>

<P><STRONG><a name="[139]"></a>UartGetChar</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartGetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comGetChar
</UL>

<P><STRONG><a name="[13f]"></a>UartIRQ</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartIRQ &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[167]"></a>prvTestWaitCondition</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[1b1]"></a>IAP_tftp_decode_op</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tftpserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_recevice_callback
</UL>

<P><STRONG><a name="[1a6]"></a>IAP_tftp_set_opcode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tftpserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_send_ack_packet
</UL>

<P><STRONG><a name="[1a1]"></a>IAP_tftp_set_block</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tftpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_tftp_set_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tftp_send_ack_packet
</UL>

<P><STRONG><a name="[1a3]"></a>IAP_tftp_extract_block</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, tftpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_tftp_extract_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap16
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_wrq_recv_callback
</UL>

<P><STRONG><a name="[519]"></a>OF</STRONG> (Thumb, 624 bytes, Stack size 28 bytes, aria.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OF
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ariaDecryptBlock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ariaEncryptBlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ariaInit
</UL>

<P><STRONG><a name="[51a]"></a>EF</STRONG> (Thumb, 642 bytes, Stack size 28 bytes, aria.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EF
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ariaDecryptBlock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ariaEncryptBlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ariaInit
</UL>

<P><STRONG><a name="[68]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[579]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[57b]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[57c]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[582]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[583]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[58a]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[58b]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[58d]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[591]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[592]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[599]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[59b]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[59c]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[69]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[5a2]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>

<P><STRONG><a name="[5c4]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[5c2]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[5c0]"></a>TI2_Config</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[5be]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[617]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[60b]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[5ea]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[6c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
